<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础知识（03）</title>
      <link href="/2022/08/07/Python-Basic03/"/>
      <url>/2022/08/07/Python-Basic03/</url>
      
        <content type="html"><![CDATA[<p>作为一个实用主义的学习者，最关心的问题一定是【我为什么要选择学<code>Python</code>，学会之后我可以用来做什么？】首先，对于初学者来说，比起其它编程语言，<code>Python</code>更容易上手。<code>Python</code>的设计哲学是优雅、明确。简单。</p><blockquote><p>在官方的The Zen of Python《Python之禅》中：There should be one – and preferably only one – obvious way to do it.</p></blockquote><p><code>Python</code>追求的是找到最好的解决方案。</p><h2 id="⛄函数"><a href="#⛄函数" class="headerlink" title="⛄函数"></a>⛄函数</h2><p>所谓函数，就是把具有独立功能的代码块组织为一个小模块，在需要的时候调用。</p><p>函数的使用包含两个步骤：</p><p>（1）定义函数——封装独立的功能；</p><p>（2）调用函数——享受封装的成果；</p><p>函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的重用。其实我们早已掌握了函数的用法，例如：</p><blockquote><p><code>print</code>() ：是一个放入对象就能将结果打印的函数；</p><p><code>input</code>()：是一个可以让用户输入信息的函数；</p><p><code>len</code>()：是一个可以测量对象长度的函数；</p><p><code>int</code>()：是一个可以将字符串类型的数字转换成是整数类型的函数。</p></blockquote><p>通过观察其实不难发现，<code>Python</code>中所谓的函数就是把你要处理的对象放到一个名字后面的括号里就可以了。</p><h3 id="👀函数的定义"><a href="#👀函数的定义" class="headerlink" title="👀函数的定义"></a>👀函数的定义</h3><p>定义函数的格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（参数<span class="number">1</span>，参数<span class="number">2</span>）:</span><br><span class="line">函数封装的代码</span><br><span class="line"><span class="keyword">return</span> </span><br></pre></td></tr></table></figure><p>（1）<code>def</code>：是英文<code>define</code>的缩写。</p><p>（2）函数名称：应该能够表达函数封装代码的功能，方便后续的调用。</p><p>（3）函数名称的命名应该符合标识符的命名规则。</p><p>​①可以由字母、下划线和数字组成</p><p>​②不能以数字开头</p><p>​③不能与关键字重名</p><blockquote><p>函数调用：调用函数很简单的，通过<code>函数名（）</code>即可完成对函数的调用；函数调用应该放在函数定义的下方。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world_1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world_2&quot;</span>)</span><br><span class="line"><span class="comment"># 只有在调用函数时，之前定义的函数才会执行</span></span><br><span class="line"><span class="comment"># 函数执行完成之后，会重新回到之前的程序中，继续执行后续的代码</span></span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure><h3 id="👀函数的参数"><a href="#👀函数的参数" class="headerlink" title="👀函数的参数"></a>👀函数的参数</h3><p><strong>函数</strong>，把<strong>具有独立功能的代码块</strong>组织为一个小模块，在需要的时候调用。</p><p><strong>函数的参数</strong>，增加函数的通用性，针对相同数据处理逻辑，能够适应更多的数据。</p><p>（1）在函数内部，把参数当做变量使用，进行需要的数据处理；</p><p>（2）函数调用时，按照函数定义的参数顺序，把希望在函数内部处理的数据，通过参数传递。</p><blockquote><p>形参：定义函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用；</p><p>实参：调用函数时，小括号中的参数，是用来把数据传递到函数内部用的。</p></blockquote><p>函数返回值。在程序开发中，有时候，会希望一个函数执行结束后，告诉调用者一个结果，以便调用者针对具体的结果做后续的处理。</p><p>返回值是函数完成工作后，最后给调用者的一个结果；在函数中使用<code>return</code>关键字可以返回结果；调用函数一方，可以使用变量来接收函数的返回结果。</p><blockquote><p>注意：return表示返回，后续的代码都不会被执行。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"><span class="comment"># 调用函数，并使用result变量接收计算结果</span></span><br><span class="line">result = <span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算结果是%d&quot;</span>%result)</span><br></pre></td></tr></table></figure><h2 id="⛄数据结构"><a href="#⛄数据结构" class="headerlink" title="⛄数据结构"></a>⛄数据结构</h2><p>   <code>Python</code> 有四种数据结构，分别是：列表、字典、元组，集合。每种数据结构都有自己的特点，并且都有着独到的用处。为了避免过早地陷入细枝末节，我们先从整体上来认识一下这四种数据结构：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [vall,val2,val3,val4]</span><br><span class="line"><span class="built_in">dict</span> = &#123;key1:vall,key2:val2&#125;</span><br><span class="line"><span class="built_in">tuple</span> = (vall,val2,val3,val4)</span><br><span class="line"><span class="built_in">set</span> = &#123;vall,val2,val3,val4&#125;</span><br></pre></td></tr></table></figure><p>从最容易识别的特征上来说，列表中的元素使用方括号扩起来，字典和集合是花括号，而元组则是圆括号。其中字典中的元素是均带有”:”的<code>key</code>与<code>value</code>的对应关系组。</p><p><code>Python</code>中数据类型可以分为<strong>数字型</strong>和<strong>非数字型</strong></p><p>（1）数字型</p><ul><li><p>整型（<code>int</code>）</p></li><li><p>浮点型（<code>float</code>）</p></li><li><p>布尔型（<code>bool</code>）</p><ul><li>真<code>True</code>非<code>0</code>数——<strong>非零即真</strong></li><li>假<code>False</code>  0</li></ul></li><li><p>复数型（<code>complex</code>）主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</p></li></ul><p>（2）非数字型</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ul><p>（3）在<code>Python</code>中，所有非数字型变量都支持以下特点</p><ul><li>都是一个序列<code>sequence</code>，也可以理解为容器</li><li>取值<code>[]</code></li><li>遍历<code>for in</code></li><li>计算长度、最大&#x2F;最小值、比较、删除</li><li>链接<code>+</code>和重复<code>*</code></li><li>切片</li></ul><h3 id="👀列表"><a href="#👀列表" class="headerlink" title="👀列表"></a>👀列表</h3><p>列表具有的最显著的特征：</p><ul><li>列表中的每一个元素都是<strong>可变</strong>的；</li><li>列表中的元素是<strong>有序</strong>的，也就是说每一个元素都有一个位置；</li><li>列表可以容纳<code>Python</code>中的任何对象。</li></ul><p>列表中的元素是可变的，这意味着我们可以在列表中添加、删除和修改元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Weekday = [<span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Sunday&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><code>List</code>（列表）是<code>Python</code>中使用最频繁的数据类型，在其他语言中通常叫做数组。专门用于存储一串信息；列表用<code>[]</code>定义，数据之间使用<code>,</code>分隔；列表的索引从0开始。</p><blockquote><p>索引就是数据在列表中的位置编号，索引又可以被称为下标。从列表中取值时，如果超出索引范围，程序会报错</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">分类</th><th align="center">关键字&#x2F;函数&#x2F;方法</th><th align="center">说明描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">增加</td><td align="center">列表.<code>insert</code>(索引，数据)</td><td align="center">在指定位置插入数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>append</code>(数据)</td><td align="center">在末尾追加数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>extend</code>(列表2)</td><td align="center">将列表2的数据追加到列表</td></tr><tr><td align="center">2</td><td align="center">修改</td><td align="center">列表[索引] &#x3D; 数据</td><td align="center">修改指定索引的数据</td></tr><tr><td align="center">3</td><td align="center">删除</td><td align="center"><code>del</code> 列表[索引]</td><td align="center">删除指定索引的数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>remove</code>[数据]</td><td align="center">删除第一个出现的指定数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>pop</code></td><td align="center">删除末尾数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>pop</code>(索引)</td><td align="center">删除指定索引数据</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>clear</code></td><td align="center">清空列表</td></tr><tr><td align="center">4</td><td align="center">统计</td><td align="center"><code>len</code>(列表)</td><td align="center">列表长度</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>count</code>(数据)</td><td align="center">数据在列表中出现的次数</td></tr><tr><td align="center">5</td><td align="center">排序</td><td align="center">列表.<code>sort</code>()</td><td align="center">升序排序</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>sort</code>(<code>reverse</code> &#x3D; <code>True</code>)</td><td align="center">降序排序</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">列表.<code>reverse</code>()</td><td align="center">逆序、反转</td></tr></tbody></table><p><strong><code>del</code>关键字</strong></p><ul><li>使用<code>del</code>关键字（<code>delete</code>）同样可以删除列表中元素；</li><li><code>del</code>关键字本质上是用来将一个变量从内存中删除的；</li><li>如果使用<code>del</code>关键字将变量从内存中删除，后续的代码就不能再使用这个变量了。</li></ul><p>在日常开发中，要从列表删除数据，建议使用列表提供的方法。</p><p><strong>循环遍历</strong></p><p>遍历就是从头到尾依次从列表中获取数据；在循环体内部针对每一个元素，执行相同的操作。在<code>Python</code>中为了提高列表的遍历效率，专门提供的迭代<code>iteration</code>遍历。使用<code>for</code>就能实现迭代遍历。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><p>尽管Python的列表中可以存储不同类型的数据。但是在开发中，更多的应用场景是</p><ul><li>列表存储相同类型的数据</li><li>通过迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ul><h3 id="👀元组（Tuple）"><a href="#👀元组（Tuple）" class="headerlink" title="👀元组（Tuple）"></a>👀元组（Tuple）</h3><p>元组其实可以理解成一个稳固版的列表，因为元组是<strong>不可修改</strong>的，因此在列表中的存在的方法均不可以使用在元组上，但是元组是可以被查看索引的，方式就和列表一样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>)</span><br><span class="line">letter[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>（1）<code>Tuple</code>（元组）与列表类似，不同之处在于元组的元素不能修改</p><ul><li><p>元组表示多个元素组成的序列</p></li><li><p>元组在<code>Python</code>开发中，有特定的应用场景</p></li></ul><p>（2）用于存储一串信息，数据之间使用<code>,</code>分隔</p><p>（3）元组用<code>（）</code>定义</p><p>（4）元组的索引从<code>0</code>开始，索引就是数据在元组中的位置编号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info_tuple = (<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>,<span class="number">1.75</span>)</span><br><span class="line"><span class="comment"># 创建空元组</span></span><br><span class="line">first_tuple = ()</span><br><span class="line"><span class="comment"># 元组中只包含一个元素时，需要在元素后面添加逗号</span></span><br><span class="line">second_tuple = (<span class="number">50</span>,)</span><br></pre></td></tr></table></figure><blockquote><p>元组的索引值是从0开始的，<code>len</code>(元组)获取元组的长度n+1，元组.<code>count</code>(数据)数据在元组中出现的次数。</p></blockquote><ul><li>元组[索引]表示从列表中取值</li><li>元组.<code>index</code>[数据]表示获得数据第一次出现的索引。</li></ul><p><strong>循环遍历</strong></p><p>取值就是从元组中获取存储在指定位置的数据。</p><p>遍历就是从头到尾依次从元组中获取数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> name_tuple:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><blockquote><p>在<code>Python</code>中，可以使用<code>for</code> 循环遍历所有非数字型类型的变量：列表、元组、字典以及字符串提示：在实际开发中，除非能够确认元组中的数据类型，否则针对元组的循环遍历需求并不是很多</p></blockquote><p><strong>应用场景</strong></p><p>尽管可以使用<code>for in</code> 遍历元组。但是在开发中，更多的应用场景是：</p><ul><li>函数的参数和返回值，一个函数可以接收任意多个参数，或者一次返回多个数据（可以利用元组保存数据，即返回值默认是以元组形式保存的）；</li><li>格式化字符串，格式化字符串后面的（）本质上就是一个元组；</li><li>让列表不可以被修改，以保护数据安全。</li></ul><p><strong>元组和列表之间的转换</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用list函数可以把元组转换成列表</span></span><br><span class="line"><span class="built_in">list</span>(元组)</span><br><span class="line"><span class="comment"># 使用tuple函数可以把列表转换成元组</span></span><br><span class="line"><span class="built_in">tuple</span>(列表)</span><br></pre></td></tr></table></figure><h3 id="👀字典-Dictionary"><a href="#👀字典-Dictionary" class="headerlink" title="👀字典(Dictionary)"></a>👀字典(Dictionary)</h3><p>编程世界中其实有很多概念都基于现实生活的原型，字典这种数据结构的特征也正如现实世界中的字典一样，使用名称一内容进行数据的构建，在<code>Python</code>中分别对应着键（<code>key</code>）-值（<code>value</code>），习惯上称之为键值对。</p><p>字典的特征总结如下：</p><ul><li>字典中数据必须是以键值对的形式出现的；</li><li>逻辑上讲，键是不能重复的，而值可以重复；</li><li>字典中的键（<code>key</code>）是不可变的，也就是无法修改的；而值（<code>value</code>）是可变的，可修改的，可以是任何对象。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiaotang = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaotang&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">1.80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）<code>dictionary</code>（字典）是除列表以外<code>Python</code>之中最灵活的数据类型</p><p>（2）字典同样可以用来存储多个数据</p><ul><li>通常用于存储描述一个物体的相关信息</li></ul><p>（3）字典和列表的区别</p><ul><li><strong>列表</strong>是<strong>有序</strong>的对象集合</li><li><strong>字典</strong>是<strong>无序</strong>的对象集合</li></ul><p>（4）字典用<code>&#123;&#125;</code>定义</p><p>（5）字典使用键值对存储数据，键值对之间使用<code>,</code>分隔</p><ul><li><p>键<code>key</code>是索引</p></li><li><p>值<code>value</code>是数据</p></li><li><p>键和值之间使用<code>:</code>分隔</p></li><li><p>键必须是唯一的</p></li><li><p>值可以取任何数据类型，但键只能使用字符串、数字或元组</p></li></ul><p><strong>字典的常用操作</strong></p><table><thead><tr><th align="center">关键字&#x2F;函数&#x2F;方法</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center"><code>len</code>(字典)</td><td align="center">获取字典的键值对数量</td></tr><tr><td align="center">字典.<code>keys</code>()</td><td align="center">所有<code>key</code>列表</td></tr><tr><td align="center">字典.<code>values</code>()</td><td align="center">所有<code>value</code>列表</td></tr><tr><td align="center">字典.<code>items</code>()</td><td align="center">所有（<code>key</code>，<code>value</code>）元组列表</td></tr><tr><td align="center">字典[<code>key</code>]</td><td align="center">可以从字典中取值，<code>key</code>不存在会报错</td></tr><tr><td align="center">字典.<code>get(key)</code></td><td align="center">可以从字典中取值，<code>key</code>不存在不会报错</td></tr><tr><td align="center"><code>del</code> 字典<code>[key]</code></td><td align="center">删除指定键值对，<code>key</code>不存在会报错</td></tr><tr><td align="center">字典.<code>pop(key)</code></td><td align="center">删除指定键值对，<code>key</code>不存在会报错</td></tr><tr><td align="center">字典.<code>popitem()</code></td><td align="center">随机删除一个键值对</td></tr><tr><td align="center">字典.<code>clear()</code></td><td align="center">清空字典</td></tr><tr><td align="center">字典<code>[key]</code> &#x3D; <code>value</code></td><td align="center">如果<code>key</code>存在，修改数据<br />如果<code>key</code>不存在，新建键值对</td></tr><tr><td align="center">字典.<code>setdefault</code>(<code>key</code>, <code>value</code>)</td><td align="center">如果<code>key</code>存在，不会修改数据<br />如果<code>key</code>不存在，新建键值对</td></tr><tr><td align="center">字典1.<code>update</code>(字典2)</td><td align="center">将字典2的数据合并到字典1</td></tr></tbody></table><p><strong>循环遍历</strong></p><p>遍历就是依次从字典中获取所有键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item_key <span class="keyword">in</span> name_dic:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s: %s&quot;</span> % (item_key, name_dic[item_key]))</span><br></pre></td></tr></table></figure><blockquote><p>在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多。</p></blockquote><p><strong>应用场景</strong></p><p>尽管可以使用<code>for in</code>遍历字典。但是在开发中，更多的应用场景是：</p><ul><li>使用多个键值对，存储描述一个物体的相关信息——描述更复杂的数据信息</li><li>将多个字典放在一个列表中，再进行遍历，在循环体内部针对每一个字典进行相同的处理</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">card_list=[</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三”，</span></span><br><span class="line"><span class="string">&quot;</span>qq<span class="string">&quot;: &quot;</span><span class="number">12345</span><span class="string">&quot;，</span></span><br><span class="line"><span class="string">&quot;</span>phone<span class="string">&quot;: &quot;</span><span class="number">110</span><span class="string">&quot;&#125;，</span></span><br><span class="line"><span class="string">&#123;&quot;</span>name<span class="string">&quot;: &quot;</span>李四<span class="string">&quot;，</span></span><br><span class="line"><span class="string">            &quot;</span>qq<span class="string">&quot;: &quot;</span><span class="number">54321</span><span class="string">&quot;，</span></span><br><span class="line"><span class="string">&quot;</span>phone<span class="string">&quot;: &quot;</span><span class="number">10086</span><span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">          ]</span></span><br></pre></td></tr></table></figure><h3 id="👀集合-Set"><a href="#👀集合-Set" class="headerlink" title="👀集合(Set)"></a>👀集合(Set)</h3><p>集合则更接近数学上集合的概念。每一个集合中的元素是<strong>无序的</strong>、<strong>不重复</strong>的任意对象，我们可以通过集合去判断数据的从属关系，有时还可以通过集合把数据结构中重复的元素减掉。</p><p>集合不能被切片也不能被索引，除了做集合运算之外，集合元素可以被添加还有删除。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">item_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">item_add(<span class="number">5</span>)</span><br><span class="line">item_discard(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>参考文献：</p><p>《编程小白的第1本Python入门书》侯爵</p><p>《Python入门教程完整版》黑马程序员</p><p>《Python基础教程（第3版）》 Magnus Lie Hetland（著）袁国忠（译）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识（02）</title>
      <link href="/2022/07/12/Python-Basic02/"/>
      <url>/2022/07/12/Python-Basic02/</url>
      
        <content type="html"><![CDATA[<p>编程语言是最有意思的，如果要实现一个复杂的功能或程序，条件语句和循环语句必不可少。除了常见的顺序结构，<code>if-elif-else</code>是常见的条件语句，当你写出这样的语句的时候，就意味着你告诉了计算机什么时候该怎么做，或者什么是不用做的。<code>for</code>循环和<code>while</code>循环是常见的循环语句，循环作为编程语言中最强力的特性之一，能够帮助我们做很多重复性的事情，比如批量命名、批量操作等。</p><h2 id="⛄顺序结构"><a href="#⛄顺序结构" class="headerlink" title="⛄顺序结构"></a>⛄顺序结构</h2><p>在我们最开始编写的基础程序中，语句都是逐条执行的。即从上而下，顺序执行代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;xiaotang&quot;</span></span><br><span class="line">name_describe =<span class="string">&quot;this is My name&quot;</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">age_describe = <span class="string">&quot;this is My age&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is a line&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is another block&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My friends&quot;</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="⛄分支结构"><a href="#⛄分支结构" class="headerlink" title="⛄分支结构"></a>⛄分支结构</h2><h3 id="👀布尔值"><a href="#👀布尔值" class="headerlink" title="👀布尔值"></a>👀布尔值</h3><p>现在，如果想更进一步，让程序选择是否执行特定的语句块，该怎么办呢？在介绍分支语句之前，我们先了解一下布尔值的用武之地，布尔值（<code>True</code>和<code>False</code>）作为一种变量的类型，实际上，<code>True</code>和<code>False</code>不过是0和1的别名，虽然看起来不同，但作用是相同的。换而言之，标准值<code>False</code>和<code>None</code>、各种类型（包括浮点数、复数等）的数值0、空序列（如空字符串、空元组和空列表）以及空映射（如空字典）都被视为假，而其他各种值都被视为真，包括特殊值<code>True</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> == <span class="number">1</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> == <span class="number">0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> + <span class="literal">False</span> + <span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><blockquote><p>因此，如果你看到一个返回1或0的表达式（可能是使用较旧的<code>Python</code>版本编写的），就知道这实际上意味着<code>True</code>或<code>False</code>。</p></blockquote><p>布尔值<code>True</code>和<code>False</code>属于类型<code>bool</code>，而<code>bool</code>与<code>list</code>、<code>str</code>和<code>tuple</code>一样，可用来转换其他的值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">&quot;I think, there I am&quot;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">20</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>鉴于任何值都可用作布尔值，因此你几乎不需要显式地进行转换（<code>Python</code>会自动转换）。</p></blockquote><h3 id="👀if语句"><a href="#👀if语句" class="headerlink" title="👀if语句"></a>👀if语句</h3><p>真值可合并，至于如何合并稍后再讲，先来看看真值可用来做什么。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的语句：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> name.endswith(<span class="string">&quot;wow!!&quot;</span>)：</span><br><span class="line"><span class="built_in">print</span>（<span class="string">&quot;hello xiaotang wow!!&quot;</span>）</span><br></pre></td></tr></table></figure><blockquote><p><code>endswith()</code>方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回<code>True</code>，否则返回<code>False</code>。可选参数”<code>start</code>“和”<code>end</code>“为检索字符串的开始与结束位置。</p></blockquote><p>这就是if语句，让你能够有条件地执行代码。这意味着如果条件（<code>if</code>和冒号之间的表达式）为前面定义的真，就执行后续代码块（这里是一条<code>print</code>语句）；如果条件为假，就不执行（你应该猜到了）。</p><h3 id="👀else子句"><a href="#👀else子句" class="headerlink" title="👀else子句"></a>👀else子句</h3><p>在前一节的示例中，如果你输入以Gumby结尾的名字，方法<code>name.endswith</code>将返回<code>True</code>，导致后续代码块执行——打印问候语。如果你愿意，可使用else子句增加一种选择（之所以叫子句是因为<code>else</code>不是独立的语句，而是if语句的一部分）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的语句：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> name.endswith(<span class="string">&quot;wow!!&quot;</span>)：</span><br><span class="line"><span class="built_in">print</span>（<span class="string">&quot;hello xiaotang wow!!&quot;</span>）</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello people&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这里，如果没有执行第一个代码块（因为条件为假），将进入第二个代码块。这个示例表明，<code>Python</code>代码很容易理解，不是吗？如果从if开始将代码大声朗读出来，听起来将像普通句子一样（也可能不那么普通）。</p><p>还有一个与<code>if</code>语句很像的“亲戚”，它就是条件表达式——C语言中三目运算符的<code>Python</code>版本。下面的表达式使用<code>if</code>和<code>else</code>确定其值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">status = <span class="string">&quot;friend&quot;</span> <span class="keyword">if</span> name.endswith(<span class="string">&quot;wow!!&quot;</span>) <span class="keyword">else</span> <span class="string">&quot;people&quot;</span></span><br></pre></td></tr></table></figure><p>如果条件（紧跟在if后面）为真，表达式的结果为提供的第一个值（这里为”<code>friend</code>“），否则为第二个值（这里为”<code>people</code>“）。</p><h3 id="👀elif子句"><a href="#👀elif子句" class="headerlink" title="👀elif子句"></a>👀elif子句</h3><p>要检查多个条件，可使用<code>elif</code>。<code>elif</code>是<code>else if</code>的缩写，由一个<code>if</code>子句和一个<code>else</code>子句组合而成，也就是包含条件的<code>else</code>子句。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Enter a number: &#x27;</span>)) </span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The number is positive&#x27;</span>) </span><br><span class="line"><span class="keyword">elif</span> num &lt; <span class="number">0</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The number is negative&#x27;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The number is zero&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="👀代码块嵌套"><a href="#👀代码块嵌套" class="headerlink" title="👀代码块嵌套"></a>👀代码块嵌套</h3><p>下面穿插点额外的内容。你可将if语句放在其他if语句块中，如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 <span class="number">1</span>：</span><br><span class="line"><span class="comment"># 条件1满足执行的代码</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">1</span>基础上的条件<span class="number">2</span>：</span><br><span class="line">    <span class="comment"># 条件2满足时，执行的代码</span></span><br><span class="line">        ......</span><br><span class="line"><span class="comment"># 条件2不满足的处理</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 条件2不满足时，执行的代码</span></span><br><span class="line"><span class="comment"># 条件1不满足的处理</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 条件1不满足时，执行的代码</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;What is your name? &#x27;</span>) </span><br><span class="line"><span class="keyword">if</span> name.endswith(<span class="string">&#x27;Gumby&#x27;</span>): </span><br><span class="line"><span class="keyword">if</span> name.startswith(<span class="string">&#x27;Mr.&#x27;</span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, Mr. Gumby&#x27;</span>) </span><br><span class="line"><span class="keyword">elif</span> name.startswith(<span class="string">&#x27;Mrs.&#x27;</span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, Mrs. Gumby&#x27;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, Gumby&#x27;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, stranger&#x27;</span>) </span><br></pre></td></tr></table></figure><p>在这里，如果名字以Gumby结尾，就同时检查名字开头，这是在第一个代码块中使用一条独立的if语句完成的。请注意，这里还使用了<code>elif</code>。最后一个分支（<code>else</code>子句）没有指定条件——如果没有选择其他分支，就选择最后一个分支。如果需要，这里的两个<code>else</code>子句都可省略。如果省略里面的<code>else</code>子句，将忽略并非以Mr.或Mrs.打头的名字（假设名字为Gumby）。如果省略外面的<code>else</code>子句，将忽略陌生人。</p><h2 id="⛄循环结构"><a href="#⛄循环结构" class="headerlink" title="⛄循环结构"></a>⛄循环结构</h2><p>至此，你知道了如何在条件为真（或假）时执行操作，但如何重复操作多次呢？例如，你可能想创建一个程序，要打印1~100的所有数。当然，你可能会想到：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span>)</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="built_in">print</span>(<span class="number">98</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">99</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>但如果你愿意使用笨办法，就不会求助于<code>Python</code>了，不是吗？</p><p>循环的作用就是让<strong>指定的代码</strong>重复的执行。</p><h3 id="👀while循环"><a href="#👀while循环" class="headerlink" title="👀while循环"></a>👀while循环</h3><p>为避免前述示例所示的繁琐代码，可以使用<code>while</code>循环快速地打印出1~100的所有数。<code>while</code>循环最常用的应用场景就是让<strong>执行的代码</strong>按照<strong>指定的次数重复</strong>执行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">100</span>: </span><br><span class="line"><span class="built_in">print</span>(x) </span><br><span class="line">x += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>就像上面那样做，不太复杂，不是吗？你还可以使用循环来确保用户输入名字，如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> name: </span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;Please enter your name: &#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, &#123;&#125;!&#x27;</span>.<span class="built_in">format</span>(name)) </span><br></pre></td></tr></table></figure><p>请尝试运行这些代码，并在要求你输入名字时直接按回车键。你会看到提示信息再次出现，因为name还是为空字符串，这相当于假。</p><blockquote><p>如果你只是输入一个空格字符（将其作为你的名字），结果将如何呢？程序将接受这个名字，因为包含一个空格字符的字符串不是空的，因此不会将name视为假。这无疑是这个小程序的一个瑕疵，但很容易修复：只需将<code>while not name</code>改为<code>while not name or name.isspace()</code>或<code>while not name.strip()</code>即可。</p><p><code>isspace()</code>方法：如果字符串中的所有字符均为空格字符，则返回”<code>True</code>“，否则，返回”<code>False</code>“;</p><p><code>strip()</code>方法：用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。该方法只能删除开头或结尾的字符，不能删除中间部分的字符。</p></blockquote><p><strong>while循环语句基本语法</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始条件设置--通常是重复执行的计数器</span><br><span class="line"><span class="keyword">while</span> 条件（判断计数器是否达到目标次数）：</span><br><span class="line">条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ......</span><br><span class="line">    处理条件（例如：计数器 + <span class="number">1</span>）</span><br></pre></td></tr></table></figure><p><code>while</code>语句以及缩进部分是一个<strong>完整的代码块</strong>。例子：打印100遍<code>Hello Python</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 初始条件设置--通常是重复执行的计数器</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># 2 使用while判断条件</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>：</span><br><span class="line"><span class="comment"># 要重复执行的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理计数器 i</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;循环结束后 i = %d&quot;</span> % i)</span><br></pre></td></tr></table></figure><p>注意：循环结束后，之前定义的计数器条件的数值时依旧存在的。</p><blockquote><p>死循环，由于程序员的问题，忘记在循环内部<strong>修改循环的判断条件</strong>，导致<strong>循环持续执行</strong>，程序无法终止。</p></blockquote><h3 id="👀for循环"><a href="#👀for循环" class="headerlink" title="👀for循环"></a>👀for循环</h3><p><code>while</code>语句非常灵活，可用于在条件为真时反复执行代码块。这在通常情况下很好，但有时候你可能想根据需要进行定制。一种这样的需求是为序列（或其他可迭代对象）中每个元素执行代码块。</p><blockquote><p>基本上，可迭代对象是可使用for循环进行遍历的对象。就目前而言，只需将可迭代对象视为序列即可。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">words = [<span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;an&#x27;</span>, <span class="string">&#x27;ex&#x27;</span>, <span class="string">&#x27;parrot&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words: </span><br><span class="line"><span class="built_in">print</span>(word) </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] </span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers: </span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><p>鉴于迭代（也就是遍历）特定范围内的数是一种常见的任务，<code>Python</code>提供了一个创建范围的内置函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) </span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>)) </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>] </span><br></pre></td></tr></table></figure><p>范围类似于切片。它们包含起始位置（这里为0），但不包含结束位置（这里为10）。在很多情况下，你都希望范围的起始位置为0。实际上，如果只提供了一个位置，将把这个位置视为结束位置，并假定起始位置为0。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">10</span>) </span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) </span><br></pre></td></tr></table></figure><p>下面的程序打印数1～100：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>): </span><br><span class="line"><span class="built_in">print</span>(number) </span><br></pre></td></tr></table></figure><p>（1）迭代字典</p><p>要遍历字典的所有关键字，可像遍历序列那样使用普通的for语句。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, d[key])</span><br></pre></td></tr></table></figure><p>也可使用<code>keys</code>等字典方法来获取所有的键。如果只对值感兴趣，可使用<code>d.values</code>。你可能还记得，<code>d.items</code>以元组的方式返回键值对。<code>for</code>循环的优点之一是，可在其中使用序列解包。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items(): </span><br><span class="line"><span class="built_in">print</span>(key, <span class="string">&#x27;corresponds to&#x27;</span>, value)</span><br></pre></td></tr></table></figure><p>（2）遍历列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;anne&#x27;</span>, <span class="string">&#x27;beth&#x27;</span>, <span class="string">&#x27;george&#x27;</span>, <span class="string">&#x27;damon&#x27;</span>]</span><br><span class="line">ages = [<span class="number">12</span>, <span class="number">45</span>, <span class="number">32</span>, <span class="number">102</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names)):</span><br><span class="line"><span class="built_in">print</span>(names[i], <span class="string">&#x27;is&#x27;</span>, ages[i], <span class="string">&#x27;years old&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="👀break和continue"><a href="#👀break和continue" class="headerlink" title="👀break和continue"></a>👀break和continue</h3><p><code>break</code>和<code>continue</code>是专门在循环中使用的关键字。</p><blockquote><p><code>break</code>：在循环过程中，如果某一条件满足后，不希望执行循环，可以使用<code>break</code>退出循环；</p><p><code>continue</code>：在循环过程中，如果某一条件满足后，不希望执行循环，但又不退出循环，可以使用<code>continue</code>跳过当次循环。即：在整个循环中，只有某些条件，不需要执行循环代码，而其它条件都需要执行。</p></blockquote><h3 id="👀练习"><a href="#👀练习" class="headerlink" title="👀练习"></a>👀练习</h3><p>（1）打印小星星</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印小星星</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 在循环内部，再增加一个循环，实现每一行的星星打印</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每一行星号输出完成后，再增加一个换行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，<code>print()</code>函数输出内容之后，会自动在内容末尾增加换行；如果不希望末尾增加换行，可以在<code>print()</code>函数输出内容的后面增加，<code>end=&quot;&quot;</code>；其中””中间可以指定<code>print()</code>函数输出内容之后，继续希望显示的内容。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向控制台输出内容结束之后，不会换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 单纯的换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>（2）打印九九乘法表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印九九乘法表</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># 最大打印9行</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 定义起始列</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 最大打印i列</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        <span class="comment"># 转义字符，\t在控制台输出一个制表符，协助在输出文件时，垂直方向保持对齐</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d*%d=%d&quot;</span>%(j,i,i*j),end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 一行打印完成后，换行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span>   <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span>   <span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span>   <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span>   <span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span>   <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span>  <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span>   <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span>  <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span>  <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span>  <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span>  <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span>   <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span>  <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span>  <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span>  <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span>  <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span>  <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span>   <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span>  <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span>  <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span>  <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span>  <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span>  <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span>  <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span>   <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span>  <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span>  <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span>  <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span>  <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span>  <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span>  <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span>  <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><blockquote><p><code>\t</code> 在控制台输出一个制表符，协助在输出文本时垂直方向保持对齐</p><p><code>\n</code> 在控制台输出一个换行符</p><p>制表符的功能是在不使用表格的情况下在垂直方向按列对齐文本。</p></blockquote><h2 id="⛄转义字符"><a href="#⛄转义字符" class="headerlink" title="⛄转义字符"></a>⛄转义字符</h2><p>转义字符是很多程序语言、数据格式和通信协议的形式文法的一部分。对于一个给定的字母表，一个转义字符的目的是开始一个字符序列，使得转义字符开头的该字符序列具有不同于该字符序列单独出现时的语义。因此转义字符开头的字符序列被叫做转义序列。</p><p>转义序列通常有两种功能。第一个是编码一个句法上的实体，如设备命令或者无法被字母表直接表示的特殊数据。第二种功能，也叫字符引用，用于表示无法在当前上下文中被键盘录入的字符（如字符串中的回车符），或者在当前上下文中会有不期望的含义的字符（如C语言字符串中的双引号字符”，不能直接出现，必须用转义序列表示）。在后面那种情况，转义序列是一种由转义字符自身和一个被引用的字符组成的一个二合字母（<code>digraph</code>）情形。</p><table><thead><tr><th align="center">转义字符</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center">\\</td><td align="center">反斜杠符号</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\t</td><td align="center">横向制表符</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr></tbody></table><p>参考文献：</p><p>《编程小白的第1本Python入门书》侯爵</p><p>《Python基础教程（第3版）》 Magnus Lie Hetland（著）袁国忠（译）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识（01）</title>
      <link href="/2022/07/09/Python-Basic01/"/>
      <url>/2022/07/09/Python-Basic01/</url>
      
        <content type="html"><![CDATA[<p>1999年，吉多·范罗苏姆向<code>DARPA</code>提交了一条名为”<code>Computer Programming for Everybody</code>“的资金申请，并在后来说明了他对<code>Python</code>的目标：</p><ul><li>一门简单直观的语言并与主要竞争者一样强大</li><li>开源，以便任何人都可以为它做贡献</li><li>代码像纯英语那样容易理解</li><li>适用于短期开发的日常任务</li></ul><p>计算机不能直接理解任何除<strong>机器语言</strong>以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。将其他语言翻译成机器语言的工具，被称为<strong>编译器</strong>。</p><p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于翻译时间点的不同。当编译器以解释方式运行的时候，也称之为<strong>解释器</strong>。</p><ul><li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如<code>C</code>、<code>C++</code>。</li><li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li></ul><blockquote><p>编译型语言和解释型语言对比</p><ul><li>速度——编译型语言比解释型语言执行速度快</li><li>跨平台性——解释型语言比编译型语言跨平台性好</li></ul></blockquote><h2 id="⛄Python-概述"><a href="#⛄Python-概述" class="headerlink" title="⛄Python 概述"></a>⛄Python 概述</h2><h3 id="👀Python特点"><a href="#👀Python特点" class="headerlink" title="👀Python特点"></a>👀Python特点</h3><ul><li><code>Python</code> 是完全面向对象的语言</li></ul><ol><li><p>函数、模块、数字、字符串都是对象，在<code>Python</code>中一切皆对象</p></li><li><p>完全支持继承、重载、多重继承</p></li><li><p>支持重载运算符，也支持泛型设计</p></li></ol><ul><li><code>Python</code> 拥有一个强大的标准库，</li></ul><ol><li><code>Python</code>语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由<code>Python</code>标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、<code>XML</code>处理等额外的功能。</li><li><code>Python</code> 社区提供了大量的第三方模块，使用方式与标准库类似。它们的功能覆盖科学计算、人工智能、机器学习、<code>Web</code>开发、数据库接口、图形系统多个领域。</li></ol><h3 id="👀Python程序执行方式"><a href="#👀Python程序执行方式" class="headerlink" title="👀Python程序执行方式"></a>👀Python程序执行方式</h3><ul><li><code>Python</code>解释器</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Python2.x解释器</span></span><br><span class="line">python xxx.py</span><br><span class="line"><span class="comment"># 使用Python3.x解释器</span></span><br><span class="line">python3 xxx.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他语言Python解释器</span></span><br><span class="line">CPython       <span class="comment"># 官方版本的C语言实现</span></span><br><span class="line">Jython        <span class="comment"># 可以运行在Java平台</span></span><br><span class="line">IronPython    <span class="comment"># 可以运行在.NET和Mono平台</span></span><br><span class="line">PyPy          <span class="comment"># Python实现的，支持JIT即时编译</span></span><br></pre></td></tr></table></figure><ul><li>交互式运行<code>Python</code>程序</li></ul><p>直接在终端中运行解释器，而不输入要执行的文件名；在<code>Python</code>的<code>Shell</code>中直接输入<code>Python</code>的代码，会立即看到程序执行结果。优缺点：适合于学习&#x2F;验证<code>Python</code>语法或者局部代码；代码不能保存，不适合运行太大的程序。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出官方的解释器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(1) 直接输入<span class="built_in">exit</span>()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(2)使用热键退出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在python解释器中，使用热键ctrl+d可以退出解释器</span></span><br></pre></td></tr></table></figure><ul><li><code>IPython</code></li></ul><p><code>Ipython</code>中的“<code>I</code>”代表交互<code>interactive</code></p><p>特点：<code>IPython</code>是一个<code>python</code>的交互式<code>shell</code>，比默认的<code>python shell</code>好用得多。<code>IPython</code>是基于<code>BSD</code>开源的。</p><ol><li>支持自动补全；</li><li>自动缩进；</li><li>支持<code>bash shell</code>命令；</li><li>内置了许多很有用的功能和函数。</li></ol><blockquote><p>单行注释，行注释，以#开头</p><p>多行注释，块注释，一对连续的三个引号</p></blockquote><h2 id="⛄Python基础知识（快速入门）"><a href="#⛄Python基础知识（快速入门）" class="headerlink" title="⛄Python基础知识（快速入门）"></a>⛄Python基础知识（快速入门）</h2><h3 id="👀标识符和关键字"><a href="#👀标识符和关键字" class="headerlink" title="👀标识符和关键字"></a>👀标识符和关键字</h3><p><strong>标识符</strong>就是程序员定义变量名、函数名。</p><blockquote><p>命名规则：在<code>Python</code>中，<strong>标识符</strong>（名称）只能由字母、数字和下划线（<code>_</code>）构成；不能以数字开头；不能与<strong>关键字</strong>重名；区分大小写。</p></blockquote><p><strong>关键字</strong>就是在<code>Python</code>内部已经使用的标识符；<strong>关键字</strong>具有特殊的功能和含义；开发者不允许定义和关键字相同名字的标识符。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过以下命令查看可以查看Python中的关键字</span></span><br><span class="line"><span class="keyword">import</span> keyword             <span class="comment"># import关键字可以导入一个“工具包”</span></span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure><h3 id="👀变量"><a href="#👀变量" class="headerlink" title="👀变量"></a>👀变量</h3><p>变量是表示（或指向）特定值的名称。例如，可以使用名称<code>X</code>来表示<code>6</code>。不同于其它一些语言，使用Python变量前必须给它赋值，因为Python变量没有默认值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python中的标识符是区分大小写的</span></span><br><span class="line">x = <span class="number">6</span>    <span class="comment"># 赋值，表示将6赋给了变量x，等号（=）用来给变量赋值；</span></span><br><span class="line"><span class="comment"># 变量赋值之后，就可在表达式中使用它</span></span><br></pre></td></tr></table></figure><p>在定义变量时，为了保证代码格式，<code>=</code>的左右应该各保留一个空格；在<code>Python</code>中，如果变量名需要<strong>两个</strong>或<strong>多个单词</strong>组成时，可以按照以下方式命名：</p><ul><li>每个单词都使用小写字母；</li><li>单词与单词之间使用<code>_</code>下划线连接，例如：<code>first_name</code>&#x2F;<code>last_name</code>。</li></ul><p><strong>驼峰命名法</strong>，当变量名是由两个或多个单词组成时，还可以利用驼峰命名法来命名。</p><p>小驼峰式命名法：第一个单词以小写字母开始，后续单词的首字母大写。例如：<code>firstName</code>&#x2F;<code>lastName</code>。</p><p>大驼峰式命名法：每一个单词的首字母都采用大写字母。例如：<code>FirstName</code>&#x2F;<code>LastName</code>。</p><h3 id="👀变量的类型"><a href="#👀变量的类型" class="headerlink" title="👀变量的类型"></a>👀变量的类型</h3><p>首先，在内存中创建一个变量，会包括：</p><ul><li>变量的名称</li><li>变量保存的数据</li><li>变量存储数据的类型</li><li>变量的地址</li></ul><p>在Python中定义变量是<strong>不需要指定类型</strong>，数据类型可以分为数字型和非数字型；</p><table><thead><tr><th align="center">数字型</th><th align="center">非数字型</th></tr></thead><tbody><tr><td align="center">整型（<code>int</code>)</td><td align="center">字符串（<code>string</code>）</td></tr><tr><td align="center">浮点型（<code>float</code>)</td><td align="center">列表（<code>list</code>）</td></tr><tr><td align="center">布尔型（<code>bool</code>：<code>True</code>非0、<code>False</code>）</td><td align="center">元组（<code>tuple</code>不能修改）</td></tr><tr><td align="center">复数型（主要用于科学计算）</td><td align="center">字典（<code>dict</code>:键和值）</td></tr></tbody></table><h3 id="👀不同类型变量之间的计算"><a href="#👀不同类型变量之间的计算" class="headerlink" title="👀不同类型变量之间的计算"></a>👀不同类型变量之间的计算</h3><ol><li><p>数字型变量之间可以直接计算</p><p>在<code>Python</code>中，两个数字型变量是可以直接进行算术运算的，如果变量是<code>bool</code>型，在计算时：</p><ul><li><p><code>True</code>对应的数字是1</p></li><li><p><code>False</code>对应的数字是0</p></li></ul></li><li><p>字符串变量之间使用<code>+</code>拼接字符串</p><p>在Python中，字符串之间可以使用<code>+</code>拼接生成新的字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">&quot;张&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;三&quot;</span></span><br><span class="line">Name = first_name + last_name</span><br><span class="line"><span class="comment"># 输出“张三”</span></span><br></pre></td></tr></table></figure></li><li><p>字符串变量可以和整数使用<code>*</code>重复拼接相同的字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;%&quot;</span> * <span class="number">10</span></span><br><span class="line"><span class="comment"># 输出“%%%%%%%%%%”</span></span><br></pre></td></tr></table></figure></li><li><p>数字型变量和字符串之间不能进行其它计算</p></li></ol><h3 id="👀变量的输入"><a href="#👀变量的输入" class="headerlink" title="👀变量的输入"></a>👀变量的输入</h3><p>所谓<strong>输入</strong>，就是用<strong>代码</strong>获取用户通过<strong>键盘输入的信息</strong>。例如：输入密码</p><p>在<code>Python</code>中，如果要获取用户在<strong>键盘</strong>上的输入信息，需要使用到<code>input</code>函数。</p><p>（1）关于函数</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>print(x)</code></td><td align="center">将<code>x</code>输出到控制台</td></tr><tr><td align="center"><code>type(x)</code></td><td align="center">查看<code>x</code>的变量类型</td></tr></tbody></table><p>（2）<code>input</code>函数实现键盘输入</p><p>在<code>Python</code>中可以使用<code>input</code>函数从键盘中等待用户的输入；</p><p>用户输入的任何内容，<code>Python</code>都认为是一个字符串；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串变量 = <span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>)</span><br><span class="line">浮点数变量 = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>))</span><br><span class="line">整数型变量 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;提示信息：&quot;</span>))</span><br></pre></td></tr></table></figure><p>（3）类型转换函数</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>int(x)</code></td><td align="center">将<code>x</code>转换为一个整数</td></tr><tr><td align="center"><code>float(x)</code></td><td align="center">将<code>x</code>转换为一个浮点数</td></tr></tbody></table><h3 id="👀变量的格式化输出"><a href="#👀变量的格式化输出" class="headerlink" title="👀变量的格式化输出"></a>👀变量的格式化输出</h3><p>在<code>Python</code>中可以使用<code>print</code>函数将信息输出到控制台；如果希望输出文字信息的同时，一起输出数据，就需要使用到<strong>格式化操作符</strong>。</p><p><code>%</code>被称为格式化操作符，专门用于处理字符串中的格式。</p><ul><li><p>包含<code>%</code>的字符串，被称为<strong>格式化字符串</strong>；</p></li><li><p><code>%</code>和不同的<strong>字符</strong>连用，<strong>不同类型的数据</strong>需要使用<strong>不同的格式化字符</strong>。</p></li></ul><table><thead><tr><th align="center">格式化字符</th><th align="center">含义说明</th></tr></thead><tbody><tr><td align="center"><code>%s</code></td><td align="center">字符串</td></tr><tr><td align="center"><code>%d</code></td><td align="center">有符号十进制整数，<code>%06d</code>表示输出的整数显示位数，不足的地方使用<code>0</code>补全</td></tr><tr><td align="center"><code>%f</code></td><td align="center">浮点数，<code>%.2f</code>表示小数点后只显示两位</td></tr><tr><td align="center"><code>%%</code></td><td align="center">输出<code>%</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法格式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % 变量<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化字符串&quot;</span> % （变量<span class="number">1</span>，变量<span class="number">2.</span>..）)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;小明&quot;</span></span><br><span class="line">student = 000001</span><br><span class="line">scale = <span class="number">10.00</span>%</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字叫%s&quot;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的学号是%06d&quot;</span> % student)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据比例是%.2f%%&quot;</span> % (scale * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="⛄运算符"><a href="#⛄运算符" class="headerlink" title="⛄运算符"></a>⛄运算符</h2><p>运算符主要包括：</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>运算符的优先级</li></ul><h3 id="👀算术运算符"><a href="#👀算术运算符" class="headerlink" title="👀算术运算符"></a>👀算术运算符</h3><p>算术运算符是完成基本的算术运算使用的符号，用来处理四则运算。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加</td><td align="center"><code>30 + 20 = 50</code></td></tr><tr><td align="center"><code>-</code></td><td align="center">减</td><td align="center"><code>30 - 20 = 10</code></td></tr><tr><td align="center"><code>*</code></td><td align="center">乘（也可计算字符串重复次数）</td><td align="center"><code>30 * 20 = 600</code></td></tr><tr><td align="center"><code>/</code></td><td align="center">除</td><td align="center"><code>30 / 20 = 1.5</code></td></tr><tr><td align="center"><code>//</code></td><td align="center">取整除</td><td align="center"><code>9 // 2 = 4</code></td></tr><tr><td align="center"><code>%</code></td><td align="center">取余数</td><td align="center"><code>9 % 2 = 1</code></td></tr><tr><td align="center"><code>**</code></td><td align="center">幂</td><td align="center"><code>2 ** 3 = 8</code></td></tr></tbody></table><h3 id="👀比较（关系）运算符"><a href="#👀比较（关系）运算符" class="headerlink" title="👀比较（关系）运算符"></a>👀比较（关系）运算符</h3><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><code>==</code></td><td align="left">检查两个操作数的值是否<strong>相等</strong>，如果是，则条件成立，返回<code>True</code></td></tr><tr><td align="center"><code>!=</code></td><td align="left">检查两个操作数的值是否<strong>不相等</strong>，如果是，则条件成立，返回<code>True</code></td></tr><tr><td align="center"><code>&gt;</code></td><td align="left">检查左操作数的值是否<strong>大于</strong>右操作数的值，如果是，则条件成立，返回<code>True</code></td></tr><tr><td align="center"><code>&lt;</code></td><td align="left">检查左操作数的值是否<strong>小于</strong>右操作数的值，如果是，则条件成立，返回<code>True</code></td></tr><tr><td align="center"><code>&gt;=</code></td><td align="left">检查左操作数的值是否<strong>大于或等于</strong>右操作数的值，如果是，则条件成立，返回<code>True</code></td></tr><tr><td align="center"><code>&lt;=</code></td><td align="left">检查左操作数的值是否<strong>小于或等于</strong>右操作数的值，如果是，则条件成立，返回<code>True</code></td></tr></tbody></table><h3 id="👀逻辑运算符"><a href="#👀逻辑运算符" class="headerlink" title="👀逻辑运算符"></a>👀逻辑运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">逻辑表达式</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>and</code></td><td align="center"><code>x and y</code></td><td>只有<code>x</code>和<code>y</code>的值都为<code>True</code>，才会返回<code>True</code><br />否则只要<code>x</code>或者<code>y</code>有一个值为<code>False</code>，就返回<code>False</code></td></tr><tr><td align="center"><code>or</code></td><td align="center"><code>a or y</code></td><td>只要<code>x</code>或者<code>y</code>有一个值为<code>True</code>，就返回True<br />只有<code>x</code>和<code>y</code>的值都为<code>False</code>，才会返回<code>False</code></td></tr><tr><td align="center"><code>not</code></td><td align="center"><code>not x</code></td><td>如果<code>x</code>为<code>True</code>，返回<code>False</code><br />如果<code>x</code>为<code>False</code>，返回<code>True</code></td></tr></tbody></table><h3 id="👀-赋值运算符"><a href="#👀-赋值运算符" class="headerlink" title="👀 赋值运算符"></a>👀 赋值运算符</h3><p>在<code>Python</code>中，使用&#x3D;可以给变量赋值；在算术运算时，为了简化代码的编写，<code>python</code>还提供了一系列与算术运算符对应的赋值运算符。注意：赋值运算符中间不能使用空格。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">简单的赋值运算符</td><td>c &#x3D; a + b将a + b的运算结果赋值为c</td></tr><tr><td align="center"><code>+=</code></td><td align="center">加法赋值运算符</td><td>c +&#x3D; a等效于c &#x3D; c + a</td></tr><tr><td align="center"><code>-=</code></td><td align="center">减法赋值运算符</td><td>c -&#x3D; a等效于c &#x3D; c - a</td></tr><tr><td align="center"><code>*=</code></td><td align="center">乘法赋值运算符</td><td>c *&#x3D; a等效于c &#x3D;c * a</td></tr><tr><td align="center"><code>/=</code></td><td align="center">除法赋值运算符</td><td>c &#x2F;&#x3D; a等效于c &#x3D; c  &#x2F;a</td></tr><tr><td align="center"><code>//=</code></td><td align="center">取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a等效于c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td align="center"><code>%=</code></td><td align="center">取模（余数）赋值运算符</td><td>c %&#x3D; a等效于c &#x3D; c % a</td></tr><tr><td align="center"><code>**=</code></td><td align="center">幂赋值运算符</td><td>c **&#x3D; a等效于c &#x3D; c ** a</td></tr></tbody></table><h3 id="👀-运算符的优先级"><a href="#👀-运算符的优先级" class="headerlink" title="👀 运算符的优先级"></a>👀 运算符的优先级</h3><p>优先级由高到低顺序排列：</p><table><thead><tr><th align="center">运算符</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>**</code></td><td>幂（最高优先级）</td></tr><tr><td align="center"><code>*</code>  <code>/</code>  <code>%</code>  <code>//</code></td><td>乘、除、取余数、取整数</td></tr><tr><td align="center"><code>+</code>  <code>-</code></td><td>加法、减法</td></tr><tr><td align="center"><code>&lt;=</code>  <code>&lt;</code>  <code>&gt;</code>  <code>&gt;=</code></td><td>比较运算符</td></tr><tr><td align="center"><code>==</code>  <code>!=</code></td><td>等于运算符</td></tr><tr><td align="center"><code>=</code>  <code>%=</code>  <code>/=</code>  <code>//=</code>  <code>-=</code>  <code>+=</code>  <code>*=</code></td><td>赋值运算符</td></tr><tr><td align="center"><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）Google Earth Engine概述</title>
      <link href="/2022/05/16/GEE01/"/>
      <url>/2022/05/16/GEE01/</url>
      
        <content type="html"><![CDATA[<p><code>Google Earth Engine (GEE)</code> 是由谷歌公司开发的众多应用之一。借助谷歌公司超强的服务器运算能力以及与 <code>NASA</code> 的合作关系，<code>GEE</code> 平台将<code>Landsat</code>、<code>MODIS</code>、 <code>Sentinel</code> 等可以公开获取的遥感图像数据存储在谷歌的磁盘阵列中，使得 <code>GEE</code> 用户可以方便的提取、调用和分析海量的遥感大数据资源。</p><p><code>GEE</code>它是一个集科学分析以及地理信息数据可视化的综合性平台。简单的说，<code>GEE</code>是一个“遥感大数据”分析和呈现的平台。作为<strong>地理云计算服务平台</strong>，<code>GEE</code> 将地理数据分析算法封装成函数接口的形式提供给用户，通过互联网可以使用户快速地访问海量的影像数据以及其他空间数据，而不需要下载到本地，在云端实现当前地理空间数据分析的全部流程。通过云计算还可以使共享的计算机软硬件资源和地理大数据，按需求提供给用户使用，使任何用户都可以使用服务商提供的多平台软硬件资源和地理大数据，开展常规个人计算机无法实现的地理计算和数据分析。</p><blockquote><p><code>GEE</code> 在设计之初就是为了服务科研人员而构建的，因此在概念上可以将 <code>GEE</code> 视为一种工具，类似于菜刀之于厨师或者猎枪之于猎手，而不应该将其当作一种复杂的计算机编程平台。</p></blockquote><p><code>GEE</code>包含图形用户界面和应用程序编程接口。<code>GEE</code> 是一个主要依靠编码命令进行空间分析和操作的平台，但 <code>GEE</code> 也有适合界面操作的平台：<code>GEE</code> 的图形用户界面(<code>Graphical User Interface, GUI</code>)。<code>GEE</code> 的 <code>GUI</code> 的优点在于符合人的操作直觉，并且对新用户友好，缺点是功能较少，可以实现的空间分析有限。<code>GEE</code> 的应用程序编程接口(<code>Application Programming Interface, API</code>)是 <code>GEE</code> 的核心功能所在，也是 <code>GEE</code> 用户最为关注的平台，与 <code>GUI</code> 相比，<code>API</code> 可以调用 <code>GEE</code> 平台中的所有数据和功能。可以说，学习 <code>GEE</code> 就是学习 <code>GEE</code> 的 <code>API</code>。</p><p><code>GEE</code> 中存储着海量的遥感数据，熟悉这些数据能够让用户更加便捷的实现空间和地理分析目标。总体上，<code>GEE</code> 的数据可以分为 4 个种类：栅格数据，栅格集数据，矢量数据，矢量集数据。</p><h2 id="⛄栅格数据"><a href="#⛄栅格数据" class="headerlink" title="⛄栅格数据"></a>⛄栅格数据</h2><p><code>GEE</code> 中的栅格数据主要包括来源自遥感卫星的数据和空间插值数据产品。</p><table><thead><tr><th align="center">数据集</th><th align="center">空间分辨率</th><th align="center">时间分辨率</th><th align="center">时间覆盖</th><th align="center">空间覆盖</th></tr></thead><tbody><tr><td align="center"><strong>Landsat</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Landsat 8 OLI&#x2F;TIRS</td><td align="center">30m</td><td align="center">16day</td><td align="center">2013-Now</td><td align="center">Global</td></tr><tr><td align="center">Landsat 7 ETM+</td><td align="center">30m</td><td align="center">16day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">Landsat 5 TM</td><td align="center">30m</td><td align="center">16day</td><td align="center">1984-2012</td><td align="center">Global</td></tr><tr><td align="center">Landsat 4–8 surface reflectance</td><td align="center">30m</td><td align="center">16day</td><td align="center">1984-Now</td><td align="center">Global</td></tr><tr><td align="center"><strong>Sentinel</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Sentinel 1 A&#x2F;B ground range detected</td><td align="center">10m</td><td align="center">6day</td><td align="center">2014-Now</td><td align="center">Global</td></tr><tr><td align="center">Sentinel 2A MSI</td><td align="center">20m</td><td align="center">10day</td><td align="center">2015-Now</td><td align="center">Global</td></tr><tr><td align="center"><strong>MODIS</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">MOD08 atmosphere</td><td align="center">1°</td><td align="center">daily</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD09 surface reflectance</td><td align="center">500m</td><td align="center">1&#x2F;8day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD10 snow cover</td><td align="center">500m</td><td align="center">1day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD11 temperature and emissivity</td><td align="center">1000m</td><td align="center">1&#x2F;8day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MCD12 Land cover</td><td align="center">500m</td><td align="center">Annual</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD13 Vegetation indices</td><td align="center">500&#x2F;250m</td><td align="center">16day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD14 Thermal anomalies &amp; fire</td><td align="center">1000m</td><td align="center">8day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MCD15 Leaf area index&#x2F;FPAR</td><td align="center">500m</td><td align="center">4day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD17 Gross primary productivity</td><td align="center">500m</td><td align="center">8day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MCD43 BRDF-adjusted reflectance</td><td align="center">1000&#x2F;500m</td><td align="center">8&#x2F;16day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MOD44 veg. cover conversion</td><td align="center">250m</td><td align="center">Annual</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">MCD45 thermal anomalies and fire</td><td align="center">500m</td><td align="center">30day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center"><strong>ASTER</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">L1 T radiance</td><td align="center">15&#x2F;30&#x2F;90m</td><td align="center">1day</td><td align="center">2000-Now</td><td align="center">Global</td></tr><tr><td align="center">Global emissivity</td><td align="center">100m</td><td align="center">Once</td><td align="center">2000-2010</td><td align="center">Global</td></tr><tr><td align="center">Other imagery</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">PROBA-V top of canopy reflectance</td><td align="center">100&#x2F;300m</td><td align="center">2day</td><td align="center">2013-Now</td><td align="center">Global</td></tr><tr><td align="center">EO-1 hyperion hyperspectral radiance</td><td align="center">30m</td><td align="center">Targeted</td><td align="center">2001-Now</td><td align="center">Global</td></tr><tr><td align="center">DMSP-OLS nighttime lights</td><td align="center">1km</td><td align="center">Annual</td><td align="center">1992-2013</td><td align="center">Global</td></tr><tr><td align="center">USDA NAIP aerial imagery</td><td align="center">1m</td><td align="center">Sub-annual</td><td align="center">2003-2015</td><td align="center">CONUS</td></tr><tr><td align="center"><strong>地形</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Shuttle Radar Topography Mission</td><td align="center">30m</td><td align="center">single</td><td align="center">2000</td><td align="center">60°N–54°S</td></tr><tr><td align="center">USGS GMTED2010</td><td align="center">10m</td><td align="center">single</td><td align="center">Multiple</td><td align="center">US</td></tr><tr><td align="center">USGS National Elevation Dataset</td><td align="center">7.5″</td><td align="center">single</td><td align="center">Multiple</td><td align="center">83°N–57°S</td></tr><tr><td align="center">GTOPO30</td><td align="center">30″</td><td align="center">single</td><td align="center">Multiple</td><td align="center">Global</td></tr><tr><td align="center">ETOPO1</td><td align="center">1′</td><td align="center">single</td><td align="center">Multiple</td><td align="center">Global</td></tr></tbody></table><p>注：来源 <code>Google Earth Engine: Planetary-scale geospatial analysis for everyone [J]. Remote Sensing of Environment</code> </p><p><code>GEE</code> 中其他的主要栅格产品包括土地利用数据，气象数据和人口数据等。这些数据与遥感影像数据相比，主要用来反映某些社会因子的空间分布，或者反映地表以上空间的自然特征。</p><table><thead><tr><th align="center">数据集</th><th align="center">空间分辨率</th><th align="center">时间分辨率</th><th align="center">时间覆盖</th><th align="center">空间覆盖</th></tr></thead><tbody><tr><td align="center"><strong>土地利用</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">GlobCover</td><td align="center">300m</td><td align="center">Non-periodic</td><td align="center">2009</td><td align="center">90°N–65°S</td></tr><tr><td align="center">USGS National Landcover Database</td><td align="center">30m</td><td align="center">Non-periodic</td><td align="center">1992-2011</td><td align="center">CONUS</td></tr><tr><td align="center">UMD global forest change</td><td align="center">30m</td><td align="center">Annual</td><td align="center">2000-2014</td><td align="center">80°N–57°S</td></tr><tr><td align="center">JRC global surface water</td><td align="center">300m</td><td align="center">Monthly</td><td align="center">1984-2015</td><td align="center">78°N–60°S</td></tr><tr><td align="center">GLCF tree cover</td><td align="center">30m</td><td align="center">5year</td><td align="center">2000-2010</td><td align="center">Global</td></tr><tr><td align="center">USDA NASS cropland data layer</td><td align="center">30m</td><td align="center">Annual</td><td align="center">1997-2015</td><td align="center">CONUS</td></tr><tr><td align="center"><strong>气象</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Global precipitation measurement</td><td align="center">6′</td><td align="center">3h</td><td align="center">2014-Now</td><td align="center">Global</td></tr><tr><td align="center">TRMM 3B42 precipitation</td><td align="center">15′</td><td align="center">3h</td><td align="center">1985-2015</td><td align="center">50°N–50°S</td></tr><tr><td align="center">CHIRPS precipitation</td><td align="center">3′</td><td align="center">5day</td><td align="center">1981-Now</td><td align="center">50°N–50°S</td></tr><tr><td align="center">NLDAS-2</td><td align="center">7.5′</td><td align="center">1h</td><td align="center">1979-Now</td><td align="center">North America</td></tr><tr><td align="center">GLDAS-2</td><td align="center">15′</td><td align="center">3h</td><td align="center">1948-2010</td><td align="center">Global</td></tr><tr><td align="center">NCEP reanalysis</td><td align="center">2.5°</td><td align="center">6h</td><td align="center">1948-Now</td><td align="center">Global</td></tr><tr><td align="center">ORNL DAYMET weather</td><td align="center">1km</td><td align="center">12 Images</td><td align="center">1980-Now</td><td align="center">North America</td></tr><tr><td align="center">GRIDMET</td><td align="center">4km</td><td align="center">1day</td><td align="center">1979-Now</td><td align="center">CONUS</td></tr><tr><td align="center">NCEP global forecast system</td><td align="center">15′</td><td align="center">6h</td><td align="center">2015-Now</td><td align="center">Global</td></tr><tr><td align="center">NCEP climate forecast system</td><td align="center">12′</td><td align="center">6h</td><td align="center">1979-Now</td><td align="center">Global</td></tr><tr><td align="center">WorldClim</td><td align="center">30″</td><td align="center">12 Images</td><td align="center">1960-1990</td><td align="center">Global</td></tr><tr><td align="center">NEX downscaled climate projections</td><td align="center">1km</td><td align="center">1day</td><td align="center">1950-2099</td><td align="center">North America</td></tr><tr><td align="center"><strong>人口</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">WorldPop</td><td align="center">100m</td><td align="center">5year</td><td align="center">Multiple</td><td align="center">2010–2015</td></tr><tr><td align="center">GPWv4</td><td align="center">30″</td><td align="center">5year</td><td align="center">2000-2020</td><td align="center">85°N–60°S</td></tr></tbody></table><p>注：来源 <code>Google Earth Engine: Planetary-scale geospatial analysis for everyone [J]. Remote Sensing of Environment</code></p><h2 id="⛄矢量数据"><a href="#⛄矢量数据" class="headerlink" title="⛄矢量数据"></a>⛄矢量数据</h2><p>简单来说，矢量数据可以理解为点、线和面类型的数据。在处理空间问题时，常常需要确定某个地理要素的位置(例如某区域商店的位置)，或者某些线状地物的位置(河流、道路等)，以及某些面状物的分布(行政边界等)。在确定矢量空间要素空间特征的基础上，再给这些空间要素贴上标签(名称，面积，权属等)，那么就得到了包含一定信息的矢量数据。我们通常将这种矢量数据成为“特征矢量”(<code>Feature</code>)，将其空间形状称为“地理特征”(<code>Geometry</code>)，将贴上去的标签信息称为“属性”(<code>Property</code>)。我们分别从<code>ArcGIS</code>和<code>GEE</code> 中添加并查看<code>Feature</code>的信息，以此加深对矢量数据的理解。</p><h2 id="⛄数据类型和参数类型"><a href="#⛄数据类型和参数类型" class="headerlink" title="⛄数据类型和参数类型"></a>⛄数据类型和参数类型</h2><h3 id="👀GEE-的数据类型-String-Number"><a href="#👀GEE-的数据类型-String-Number" class="headerlink" title="👀GEE 的数据类型 (String, Number)"></a>👀GEE 的数据类型 (<code>String</code>, <code>Number</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">显示：<span class="title function_">print</span>(string)</span><br><span class="line">创建：ee.<span class="title class_">String</span>()</span><br><span class="line">修改：string.<span class="title function_">cat</span>()string.<span class="title function_">replace</span>()</span><br><span class="line">段落：string.<span class="title function_">split</span>() string.<span class="property">match</span></span><br><span class="line">查询：string.<span class="title function_">slice</span>() string.<span class="title function_">length</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">Number</span>()</span><br><span class="line">修改：number.<span class="title function_">uint8</span>() number.<span class="title class_">Uint8</span>() number.<span class="title function_">int8</span>() number.<span class="title function_">toInt8</span>()……</span><br><span class="line">比较：number.<span class="title function_">eq</span>() number.<span class="title function_">neq</span>()……</span><br><span class="line">    number.<span class="title function_">and</span>() number.<span class="title function_">or</span>() ee.<span class="property">Algorithms</span>.<span class="title class_">IsEqua</span>()……</span><br><span class="line">运算：number.<span class="title function_">abs</span>() number.<span class="title function_">round</span>() number.<span class="title function_">pow</span>()……</span><br><span class="line">字位：number.<span class="title function_">bitwiseAnd</span>() number.<span class="title function_">bitwiseOr</span>() number.<span class="title function_">bitwise_and</span>()</span><br><span class="line">    number.<span class="title function_">bitwise_or</span>() number.<span class="title function_">leftShift</span>() number.<span class="title function_">right_shift</span>()……</span><br></pre></td></tr></table></figure><h3 id="👀GEE-的数据类型-Dictionary，List，Array"><a href="#👀GEE-的数据类型-Dictionary，List，Array" class="headerlink" title="👀GEE 的数据类型(Dictionary，List，Array)"></a>👀GEE 的数据类型(<code>Dictionary</code>，<code>List</code>，<code>Array</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">Dicionary</span>()</span><br><span class="line">修改：dictionary.<span class="title function_">combine</span>() dinctionary.<span class="title function_">set</span>()</span><br><span class="line">查询：dictionary.<span class="title function_">keys</span>() dictionary.<span class="title function_">get</span>() dictionary.<span class="title function_">values</span>()</span><br><span class="line">对比：dictionary.<span class="title function_">contains</span>()</span><br><span class="line">尺寸：dictionary.<span class="title function_">size</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">List</span>() list.<span class="title function_">repeat</span>() list.<span class="title function_">sequence</span>()</span><br><span class="line">修改：list.<span class="title function_">set</span>() list.<span class="title function_">replaceAll</span>() list.<span class="title function_">add</span>() list.<span class="title function_">insert</span>() list.<span class="title function_">zip</span>()</span><br><span class="line">list.<span class="title function_">reverse</span>() list.<span class="title function_">rotate</span>() list.<span class="title function_">sort</span>() list.<span class="title function_">swap</span>() list.<span class="title function_">flatten</span>()</span><br><span class="line">查询：list.<span class="title function_">get</span>() list.<span class="title function_">remove</span>() list.<span class="title function_">removeAll</span>()</span><br><span class="line">比较：list.<span class="title function_">equals</span>() list.<span class="title function_">contains</span>() list.<span class="title function_">containsALL</span>() list. <span class="title function_">indexOf</span>()          </span><br><span class="line">list.<span class="title function_">indexOfSubList</span>() list.<span class="title function_">lastIndexOfSubList</span>() list.<span class="title function_">frequency</span>()</span><br><span class="line">其他：list.<span class="title function_">map</span>() list.<span class="title function_">iterate</span>() list.<span class="title function_">length</span>() list.<span class="title function_">size</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">Array</span>() ee.<span class="property">Array</span>.<span class="title function_">identity</span>() ee.<span class="property">Array</span>.<span class="title function_">repeat</span>()</span><br><span class="line">修改：array.<span class="title function_">mask</span>()array.<span class="title function_">transpose</span>() array.<span class="title function_">uint8</span>()array.<span class="title class_">Uint8</span>()</span><br><span class="line">数学：array.<span class="title function_">eq</span>() array.<span class="title function_">and</span>() array.<span class="title function_">or</span>() array.<span class="title function_">round</span>()</span><br><span class="line">array.<span class="title function_">bitwiseAnd</span>() array.<span class="title function_">leftShift</span>() </span><br></pre></td></tr></table></figure><h3 id="👀GEE-的数据类型-Geometry，Feature，FeatureCollection"><a href="#👀GEE-的数据类型-Geometry，Feature，FeatureCollection" class="headerlink" title="👀GEE 的数据类型(Geometry，Feature，FeatureCollection)"></a>👀GEE 的数据类型(<code>Geometry</code>，<code>Feature</code>，<code>FeatureCollection</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>() ee.<span class="property">Geometry</span>.<span class="title class_">Multipoint</span>() 绘图工具 ……</span><br><span class="line">几何：<span class="title class_">Geometry</span>.<span class="title function_">transform</span>() geometry.<span class="title function_">centroid</span>() geometry.<span class="title function_">simplify</span>()            </span><br><span class="line">geometry.<span class="title function_">bounds</span>() geometry.<span class="title function_">buffer</span>() geometry.<span class="title function_">union</span>() ……</span><br><span class="line">查询：geometry.<span class="title function_">geometries</span>() geometry.<span class="title function_">coordinates</span>() geometry.<span class="title function_">length</span>() </span><br><span class="line">geometry.<span class="title function_">area</span>() geometry.<span class="title function_">perimeter</span>() geometry.<span class="title function_">distance</span>() </span><br><span class="line">转换：geometry.<span class="title function_">toGeoJSON</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">Feature</span>()绘图工具</span><br><span class="line">编辑：<span class="title class_">Feature</span>.<span class="title function_">select</span>() <span class="title class_">Feature</span>.<span class="title function_">transform</span>() <span class="title class_">Feature</span>.<span class="property">set</span>/<span class="title function_">setMulti</span>()</span><br><span class="line">几何：<span class="title class_">Feature</span>.<span class="property">centroid</span>/simplify/bounds/convexHull/<span class="title function_">buffer</span>()</span><br><span class="line"><span class="title class_">Feature</span>.<span class="property">union</span>/intersection/difference/<span class="title function_">symmetricDifference</span>()</span><br><span class="line">提取：<span class="title class_">Feature</span>.<span class="title function_">geometry</span>() <span class="title class_">Feature</span>.<span class="title function_">get</span>() <span class="title class_">Feature</span>.<span class="property">Length</span>/<span class="title class_">Area</span>/<span class="title class_">Perimeter</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：<span class="variable constant_">GEE</span>自带 上传 <span class="title class_">FushionTable</span> ee.<span class="title class_">FeatureCollection</span>() .<span class="title function_">randomPoints</span>() 手绘…</span><br><span class="line">编辑：.<span class="title function_">filterMetadata</span>() .<span class="title function_">limit</span>() .<span class="title function_">filterDate</span>() .<span class="title function_">filterBounds</span>() .<span class="title function_">filter</span>() </span><br><span class="line">    .<span class="title function_">select</span>() .<span class="title function_">distinct</span>() .<span class="title function_">union</span>() .<span class="title function_">merge</span>() .<span class="title function_">set</span>() .<span class="title function_">remap</span>() .<span class="title function_">sort</span>()</span><br><span class="line">    .<span class="title function_">makeArray</span>()</span><br><span class="line">转换：.<span class="title function_">geometry</span>() .<span class="title function_">reduceToImage</span>()</span><br><span class="line">查询：.<span class="title function_">first</span>() .<span class="title function_">toList</span>() .<span class="title function_">aggregate_first</span>() .<span class="title function_">aggregate_array</span>()</span><br><span class="line">统计：.<span class="property">aggregate_stats</span>/_histogram/_count/_count_distinct       </span><br><span class="line">    .<span class="property">aggregate_max</span>/_min/_sum/_mean/_product          </span><br><span class="line">    .<span class="property">aggregate_sample_var</span>/_total_var/_sample_sd/_total_sd/</span><br><span class="line">其他: .<span class="title function_">map</span>()</span><br></pre></td></tr></table></figure><h3 id="👀GEE-的数据类型-Image，ImageCollection"><a href="#👀GEE-的数据类型-Image，ImageCollection" class="headerlink" title="👀GEE 的数据类型 (Image，ImageCollection)"></a>👀GEE 的数据类型 (<code>Image</code>，<code>ImageCollection</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: <span class="variable constant_">GEE</span>自带 用户上传 ee.<span class="title function_">image</span>()/<span class="title function_">constant</span>() ee.<span class="property">Image</span>.<span class="title function_">pixelLonLat</span>() </span><br><span class="line">编辑: .<span class="title function_">mask</span>() .<span class="title function_">clip</span>() .<span class="title function_">select</span>() .<span class="title function_">slice</span>() .<span class="title function_">addBands</span>() .<span class="title function_">reproject</span>() .<span class="title function_">rbgtohsv</span>()         </span><br><span class="line">    .<span class="title function_">hsvtorbg</span>() .<span class="title function_">unit8</span>() .<span class="title function_">cast</span>() .<span class="title function_">set</span>() .<span class="title function_">setMulti</span>() .<span class="title function_">remap</span>() .<span class="title function_">where</span>()   </span><br><span class="line">    .<span class="title function_">metadata</span>() .<span class="title function_">clamp</span>() .<span class="title function_">unitScale</span>() .<span class="title function_">interpolate</span>() .<span class="title function_">eq</span>()…… .<span class="title function_">abs</span>()…… .<span class="title function_">sin</span>() …… </span><br><span class="line">    .<span class="title function_">bitWiseAnd</span>()…… .<span class="title function_">reduce</span>()</span><br><span class="line">地形: image.<span class="title function_">derivative</span>() ee.<span class="property">Terrain</span>.<span class="title function_">products</span>() ee.<span class="property">Algorithm</span>.<span class="title class_">Terrain</span>()</span><br><span class="line">     ee.<span class="property">Terrain</span>.<span class="title function_">slope</span>() ee.<span class="property">Terrain</span>.<span class="title function_">aspect</span>() ee.<span class="property">Terrain</span>.<span class="title function_">fillMinima</span>()  </span><br><span class="line"> ee.<span class="property">Terrain</span>.<span class="title function_">hillshade</span>() ee.<span class="property">Terrain</span>.<span class="title function_">hillshadow</span>() ee.<span class="property">Algorithm</span>.<span class="title class_">Hillshadow</span>()</span><br><span class="line">纹理: .<span class="title function_">entropy</span>() .<span class="title class_">Texture</span>() .<span class="title function_">zeroCrossing</span>() .<span class="property">ee</span>.<span class="property">Algorithms</span>.<span class="title class_">CannyEdgeDetector</span>()   </span><br><span class="line">    ee.<span class="property">Algorithms</span>.<span class="title class_">HoughTransform</span>()</span><br><span class="line">邻域: .<span class="title function_">focal_max</span>() .<span class="title function_">focal_min</span>() .<span class="title function_">focal_median</span>() .<span class="title function_">focal_mode</span>() .<span class="title function_">convolve</span>()                </span><br><span class="line">    .<span class="title function_">reduceNeighborhood</span>()</span><br><span class="line">转换: .<span class="property">Image</span>.<span class="title class_">ToVector</span>() <span class="title class_">Image</span>.<span class="title class_">ToArray</span>() <span class="title class_">Image</span>.<span class="title function_">arrayFlatten</span>()</span><br><span class="line">其他: .<span class="title class_">CrossCorrelation</span>() .<span class="title function_">distance</span>() <span class="title class_">Export</span>.<span class="title function_">image</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: ee.<span class="title class_">ImageCollection</span>() ee.<span class="property">ImageCollection</span>.<span class="title function_">load</span>()</span><br><span class="line">筛选: .<span class="title function_">limit</span>() .<span class="title function_">filterMetadata</span>() .<span class="title function_">filterDate</span>() .<span class="title function_">filterBounds</span>() .<span class="title function_">filter</span>() .<span class="title function_">select</span>()     </span><br><span class="line">.<span class="title function_">distinct</span>() .<span class="title function_">comnibe</span>() .<span class="title function_">unit8</span>()…… .<span class="title function_">set</span>() .<span class="title function_">setMulti</span>()</span><br><span class="line">求值: .<span class="title function_">mosaic</span>() .<span class="property">and</span>/<span class="title function_">or</span>() .<span class="property">sum</span>/product/max/min/mean/mode/median/<span class="title function_">count</span>()</span><br><span class="line">转换: .<span class="title function_">first</span>() .<span class="title function_">toList</span>() .<span class="title function_">toArray</span>()     </span><br></pre></td></tr></table></figure><h3 id="👀GEE-的数据类型-Landsat-Images-ConfusionMarix"><a href="#👀GEE-的数据类型-Landsat-Images-ConfusionMarix" class="headerlink" title="👀GEE 的数据类型 (Landsat Images, ConfusionMarix)"></a>👀GEE 的数据类型 (<code>Landsat Images</code>, <code>ConfusionMarix</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">LansatCollection</span>.<span class="title function_">qualityMosaic</span>()</span><br><span class="line"><span class="title class_">LansatCollection</span>.<span class="title function_">unmixing</span>()</span><br><span class="line"><span class="title class_">LansatCollection</span>.<span class="title function_">normalizedDifference</span>()</span><br><span class="line">ee.<span class="property">Algorithms</span>.<span class="property">Landsat</span>.<span class="title function_">simpleCloudScore</span>()</span><br><span class="line">ee.<span class="property">Algorithms</span>.<span class="property">Landsat</span>.<span class="title function_">simpleComposite</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: ee.<span class="title class_">ConfusionMatrix</span>() </span><br><span class="line">转换: <span class="title class_">ConfusionMatrix</span>.<span class="title function_">array</span>()</span><br><span class="line">精度: .<span class="title function_">kappa</span>() .<span class="title function_">accuracy</span>() .<span class="title function_">producersAccuracy</span>() .<span class="title function_">consumersAccuracy</span>() .<span class="title function_">order</span>()</span><br></pre></td></tr></table></figure><h3 id="👀GEE-的参数类型-Date-DateRange"><a href="#👀GEE-的参数类型-Date-DateRange" class="headerlink" title="👀GEE 的参数类型 (Date, DateRange)"></a>👀GEE 的参数类型 (<code>Date</code>, <code>DateRange</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="title class_">Date</span>() ee.<span class="property">Algorithms</span>.<span class="title class_">Date</span>() ee.<span class="property">Date</span>.<span class="title function_">fromYMD</span>() ee.<span class="property">Date</span>.<span class="title function_">parse</span>()</span><br><span class="line">编辑：<span class="title class_">Date</span>.<span class="title function_">advance</span>() <span class="title class_">Date</span>.<span class="title function_">update</span>()</span><br><span class="line">调整：<span class="title class_">Date</span>.<span class="title function_">format</span>() <span class="title class_">Date</span>.<span class="title function_">milis</span>() <span class="title class_">Date</span>.<span class="title function_">getRange</span>()</span><br><span class="line">提取：<span class="title class_">Date</span>.<span class="title function_">get</span>() <span class="title class_">Date</span>.<span class="title function_">gerFraction</span>() <span class="title class_">Date</span>.<span class="title function_">unitRation</span>() <span class="title class_">Date</span>.<span class="title function_">difference</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: ee.<span class="title class_">DateRange</span>() ee.<span class="property">DateRange</span>.<span class="title function_">unbounded</span>()</span><br><span class="line">联并: <span class="title class_">DateRange</span>.<span class="title class_">Union</span>() <span class="title class_">DateRange</span>.<span class="title function_">intersection</span>()</span><br><span class="line">查询: <span class="title class_">DateRange</span>.<span class="title function_">start</span>() <span class="title class_">DateRange</span>.<span class="title function_">end</span>()</span><br><span class="line">判断: .<span class="title function_">intersencts</span>() .<span class="title function_">contains</span>() .<span class="title function_">inEmpty</span>() .<span class="title function_">isUnbounded</span>()</span><br></pre></td></tr></table></figure><h3 id="👀GEE-的参数类型-Filter，Join"><a href="#👀GEE-的参数类型-Filter，Join" class="headerlink" title="👀GEE 的参数类型 (Filter，Join)"></a>👀GEE 的参数类型 (<code>Filter</code>，<code>Join</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建：ee.<span class="property">Filter</span>.<span class="title function_">eq</span>() ee.<span class="property">Filter</span>.<span class="title function_">neq</span>() ee.<span class="property">Filter</span>.<span class="title function_">ge</span>() ee.<span class="property">Filter</span>.<span class="title function_">gte</span>() ee.<span class="property">Filter</span>.<span class="title function_">le</span>() </span><br><span class="line">ee.<span class="property">Filter</span>.<span class="title function_">lte</span>() ee.<span class="property">Filter</span>.<span class="title function_">maxDifference</span>()</span><br><span class="line">字段：ee.<span class="property">Filter</span>.<span class="title function_">stringContains</span>() ee.<span class="property">Filter</span>.<span class="title class_">StarsWith</span>() ee.<span class="property">Filter</span>.<span class="title class_">EndWith</span>() </span><br><span class="line">ee.<span class="property">Filter</span>.<span class="title class_">Rangecontains</span>() ee.<span class="property">Filter</span>.<span class="title function_">listContains</span>() ee.<span class="property">Filter</span>.<span class="title function_">inList</span>()</span><br><span class="line">时间：ee.<span class="property">Filter</span>.<span class="title function_">calendarRange</span>() ee.<span class="title class_">FilterDateRangeContains</span>() </span><br><span class="line">ee.<span class="property">Filter</span>.<span class="title function_">dayOfYear</span>()</span><br><span class="line">转换：ee.<span class="property">Filter</span>.<span class="title function_">and</span>() ee.<span class="property">Filter</span>.<span class="title function_">or</span>() ee.<span class="property">Filter</span>.<span class="title function_">not</span>() ee.<span class="title class_">Filter</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ee.<span class="property">Join</span>.<span class="title function_">simple</span>() ee.<span class="property">Join</span>.<span class="title function_">inverted</span>() ee.<span class="property">Join</span>.<span class="title function_">inner</span>()</span><br><span class="line">ee.<span class="property">Join</span>.<span class="title function_">saveAll</span>() ee.<span class="property">Join</span>.<span class="title function_">saveBest</span>() ee.<span class="property">Join</span>.<span class="title function_">saveFirst</span>()</span><br><span class="line"><span class="title class_">Spatial</span> <span class="title class_">Joins</span> (ee.<span class="property">Filter</span>.<span class="property">withinDistance</span>/ee.<span class="property">Filter</span>.<span class="property">intersects</span>)</span><br></pre></td></tr></table></figure><h3 id="👀GEE-的参数类型-Reducer，Kernel，Algorithm"><a href="#👀GEE-的参数类型-Reducer，Kernel，Algorithm" class="headerlink" title="👀GEE 的参数类型 (Reducer，Kernel，Algorithm)"></a>👀GEE 的参数类型 (<code>Reducer</code>，<code>Kernel</code>，<code>Algorithm</code>)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: ee.<span class="property">Reducer</span>.<span class="title function_">count</span>() .<span class="title function_">countEvery</span>() .<span class="title function_">first</span>() .<span class="title function_">histogram</span>() .<span class="title function_">allNonZero</span>() </span><br><span class="line">    .<span class="title function_">anyNonZero</span>() .<span class="title function_">frequencyHistrogram</span>() .<span class="title function_">toList</span>() .<span class="title function_">toCollection</span>()</span><br><span class="line">数学: <span class="title function_">sum</span>() .<span class="title function_">product</span>() .<span class="title function_">mean</span>() .<span class="title function_">variance</span>() .<span class="title function_">std_dev</span>() .<span class="title function_">sampleVariance</span>()       </span><br><span class="line">    .<span class="title function_">sampleStdDev</span>() .<span class="title function_">max</span>() .<span class="title function_">min</span>() .<span class="title function_">minMax</span>() .<span class="title function_">median</span>() .<span class="title function_">mode</span>()         </span><br><span class="line">    .<span class="title function_">intervalMean</span>() .<span class="title function_">percentile</span>() .<span class="title function_">linearFit</span>()</span><br><span class="line">转换: .<span class="title function_">setOutputs</span>() .<span class="title function_">getOutputs</span>() .<span class="title function_">combine</span>() .<span class="title function_">repeat</span>() .<span class="title function_">repeat</span>()      </span><br><span class="line">     .<span class="title function_">group</span>() .<span class="title function_">unweighted</span>() .<span class="title function_">splitWeights</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建: ee.<span class="property">Kernel</span>.<span class="title function_">roberts</span>() ee.<span class="property">Kernel</span>.<span class="title function_">prewitt</span>() ee.<span class="property">Kernel</span>.<span class="title function_">sobel</span>()    </span><br><span class="line">ee.<span class="property">Kernel</span>.<span class="title function_">compass</span>() ee.<span class="property">Kernel</span>.<span class="title function_">kirsch</span>() ee.<span class="property">Kernel</span>.<span class="title function_">laplacian4</span>()</span><br><span class="line">ee.<span class="property">Kernel</span>.<span class="title function_">laplacian8</span>() ee.<span class="property">Kernel</span>.<span class="title function_">euclidean</span>() ee.<span class="property">Kernel</span>.<span class="title function_">gaussian</span>()</span><br><span class="line">ee.<span class="property">Kernel</span>.<span class="title function_">manhattan</span>() ee.<span class="property">Kernel</span>.<span class="title function_">chebyshev</span>() ee.<span class="property">Kernel</span>.<span class="title function_">circle</span>()      </span><br><span class="line">ee.<span class="property">Kernel</span>.<span class="title function_">octagon</span>() ee.<span class="property">Kernel</span>.<span class="title function_">square</span>() ee.<span class="property">Kernel</span>.<span class="title function_">diamond</span>() ee.<span class="property">Kernel</span>.<span class="title function_">cross</span>()</span><br><span class="line">ee.<span class="property">Kernel</span>.<span class="title function_">plus</span>() ee.<span class="property">Kernel</span>.<span class="title function_">fixed</span>()</span><br><span class="line">编辑: <span class="title class_">Kernel</span>.<span class="title function_">rotate</span>() kernel.<span class="title function_">add</span>() <span class="title function_">print</span>(<span class="title class_">Kernel</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Algorithm</span>,算法的目的是减少重复运算，我们可将其理解为一个“小程序”，借助这个小程序可以对数据集内的每一个数据都进行同样的操作。下边是算法的语法格式：</span><br><span class="line"><span class="keyword">function</span> 函数名(变量)</span><br><span class="line">   &#123; 操作 &#125;</span><br><span class="line">算法的核心在于操作的编写。编写操作时要注意两点，第一，应该按照目标数据集确定变量名，比如针对栅格数据集的操作变量可以写作 <span class="title class_">Image</span> 或者 img，这样能够提高操作的可读性。第二，操作必须包含 <span class="keyword">return</span> 命令以告诉 <span class="variable constant_">GEE</span> 算法的目的是什么。</span><br></pre></td></tr></table></figure><h2 id="⛄GEE平台优势与应用"><a href="#⛄GEE平台优势与应用" class="headerlink" title="⛄GEE平台优势与应用"></a>⛄GEE平台优势与应用</h2><p>随着云计算技术的不断发展，<code>GEE</code> 从2008 年提出构想不断发展至今天，已经成为提供覆盖全球的地理空间数据的集成、处理、可视化和综合分析一站式解决方案的云端共享平台，总结GEE的平台具有如下优势：</p><ul><li><strong>免费向非商业用户提供使用</strong>。<code>GEE</code>面向全球科研人员、学生、教育工作者等提供非商业性质用户提供免费服务。</li><li><strong>算法高集成度以及可定制性</strong>。在算法集成方面，提供了持续更新的智能算法以及可供研究者定制的功能接口，这将激励研究者不断尝试新的算法来实现科学构想，而不只是停留在理论层面，这将进一步促进平台的智能化发展，很多以往难以解决的问题都将开启新的思路。</li><li><strong>后台处理运算能力强</strong>。使用<code>GEE</code>平台，用户可以比较方便地处理全球影像数据，解决了用户受限自己本地机器运算能力不强，以及存储空间不足的问题，能够高校、快速地处理大范围的影像。</li><li><strong>完整的生态开发环境</strong>。目前<code>GEE</code> 已经拥有一个完整而良好的开发生态环境，开发者和平台核心团队人员可以通过论坛，会议等多种形式进行深入甲流，探讨各种问题，除了现有的工具资源，用户还可以利用GEE提供的开发包做二次开发，满足更多的需求，实现更加强大的功能。</li></ul><p><code>GEE</code>被广泛应用于各个领域，涵盖全球森林变化，全球地表水变化、作物产量估算、稻田制图、城市测绘、洪水测绘、火灾恢复和疟疾风险绘图等等不同主题。它还被整合到许多第三方应用中，例如分析物种栖息地范围（<code>Map of Life</code>）、监测气候（<code>Climate Engine</code>）和评估土地利用变化（<code>Collect Earth</code>）等等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.aisoutu.com/a/776592">遥感云计算平台:Google Earth Engine</a></li><li>遥感大数据工具（<code>Google Earth Engine</code>）基础教程，作者：王金柱</li></ol>]]></content>
      
      
      <categories>
          
          <category> GEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GEE </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之常见的问题及小技巧Tips</title>
      <link href="/2022/05/13/Hexo-Tips/"/>
      <url>/2022/05/13/Hexo-Tips/</url>
      
        <content type="html"><![CDATA[<h2 id="⛄提高GitHub-访问速度"><a href="#⛄提高GitHub-访问速度" class="headerlink" title="⛄提高GitHub 访问速度"></a>⛄提高GitHub 访问速度</h2><p>将<code>Hexo</code>项目托管在<code>GitHub</code>数据仓库中，面临的问题通常就是<code>GitHub</code>访问速度比较慢。本人通过搜索资料、不断尝试，发现通过修改 <code>hosts</code> 文件可以进行加速，访问速度得到了有效的提高，亲测有效。手动把<code>cdn</code>和<code>ip</code>地址绑定，具体的步骤为：</p><p>第一步：获取 <code>GitHub</code> 的 global.ssl.fastly 地址</p><p>访问入口：<a href="https://ipaddress.com/website/github.global.ssl.fastly.net#ipinfo">点击进入</a></p><p>获得<code>IP Address</code>：<code>199.232.69.194</code></p><p>第二步：获取 <code>github.com</code> 的地址</p><p>访问入口：<a href="https://ipaddress.com/website/github.com#ipinfo">点击进入</a></p><p>获得<code>IP Address</code>：<code>140.82.113.4</code></p><p>第三步：修改 <code>hosts</code> 文件映射上面查找到的 <code>IP</code></p><p>①首先，针对<code>windows</code>系统，修改<code>C:\Windows\System32\drivers\etc\hosts</code>文件的权限，指定可写入：右击-&gt;<code>hosts</code>-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在Users的权限”写入“后面打勾，点击确定。</p><p>②然后，右击-&gt;<code>hosts</code>-&gt;打开方式-&gt;选定记事本（或者Notepad++、EmEditor工具）-&gt;在末尾处添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.113.4 github.com</span><br></pre></td></tr></table></figure><h2 id="⛄Hexo常见问题"><a href="#⛄Hexo常见问题" class="headerlink" title="⛄Hexo常见问题"></a>⛄Hexo常见问题</h2><h3 id="👀问题一，hexo命令运行出错"><a href="#👀问题一，hexo命令运行出错" class="headerlink" title="👀问题一，hexo命令运行出错"></a>👀问题一，hexo命令运行出错</h3><p><strong>①问题描述</strong>：运行Hexo报错hexo : 无法加载文件hexo.ps1，因为在此系统上禁止运行脚本</p><p>使用如下命令安装 <code>Hexo</code>成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>运行<code>hexo -v、hexo clean、hexo g、hexo s、hexo d</code>会出现错误：</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">PS C:\Users\Desktop\heartlovelife&gt; hexo s</span><br><span class="line">hexo : 无法加载文件 C:\Users\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID</span><br><span class="line">=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo s</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p><strong>②解决方案</strong>：针对<code>windows</code>系统，设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地<code>PowerShell</code>脚本在为签名的情况下运行。</p><h3 id="👀问题二，-hexo-init初始化失败"><a href="#👀问题二，-hexo-init初始化失败" class="headerlink" title="👀问题二， hexo init初始化失败"></a>👀问题二， <code>hexo init</code>初始化失败</h3><p><strong>①问题描述</strong>：<code>WARN Failed to install dependencies. Please run ‘npm install’ manually!</code></p><p><strong>②解决方案</strong>：如果我们输入命令<code>npm install</code>还是会出现错误，这时我们需要修改<code>npm</code>的镜像：</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"># 修改镜像</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"># 初始化</span><br><span class="line">hexo init</span><br><span class="line"># 利用cnpm执行cnpm install</span><br><span class="line">cnpm install </span><br></pre></td></tr></table></figure><h3 id="👀问题三，hexo-d部署失败"><a href="#👀问题三，hexo-d部署失败" class="headerlink" title="👀问题三，hexo d部署失败"></a>👀问题三，<code>hexo d</code>部署失败</h3><p><strong>①问题描述</strong>：<code>fatal: unable to auto-detect email address....</code></p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">fatal: unable to auto-detect email address</span><br><span class="line">error:src refspec HEAD does not match any</span><br><span class="line">error:failed to push some refs to &quot;*******&quot;</span><br><span class="line">FATAL &#123;</span><br><span class="line">err:Error:Spawn failed</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②解决方案</strong>：在文件浏览器中勾选显示隐藏的项目，进入我们的博客目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Blog_Hexo\Blog\.deploy_git\.git</span><br></pre></td></tr></table></figure><p>找到config文件，添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = 3086786161@qq.com</span><br><span class="line">name = HeartLoveLife</span><br><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">remote = https://github.com/HeartLoveLife/HeartLoveLife.github.io.git</span><br><span class="line">merge = refs/heads/main</span><br></pre></td></tr></table></figure><h3 id="👀问题四，hexo-s出现警告"><a href="#👀问题四，hexo-s出现警告" class="headerlink" title="👀问题四，hexo s出现警告"></a>👀问题四，<code>hexo s</code>出现警告</h3><p><strong>①问题描述</strong>：<code>Accessing non-existent property &#39;*&#39; of module exports inside circular dependency</code></p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:60224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p><strong>②解决方案</strong>：出现警告，是因为<code>node</code>版本太高，切换成低版本的<code>node</code>来安装<code>Hexo</code>就可以了</p><h2 id="⛄Hexo更换主题"><a href="#⛄Hexo更换主题" class="headerlink" title="⛄Hexo更换主题"></a>⛄Hexo更换主题</h2><p>在博客的项目文件夹下打开<code>git bash</code>执行命令，以<code>hexo-theme-butterfly</code>主题为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>运行成功之后，在项目文件夹<code>source</code>中可以查看到新的主题<code>themes</code>文件夹：<code>butterfly</code></p><p>在博客的项目文件夹下，修改<code>_config.yml</code>配置文件如下:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme: landscape  默认主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>此时主题还不能正常配置使用，需要安装<code>pug</code> 以及<code>stylus</code> 的渲染器:</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line"># npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">cnpm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>执行<code>hexo s</code>部署到本地运行</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line"># 清除缓存b.json 和已生成的静态文件 public</span><br><span class="line">hexo clean</span><br><span class="line"># 生成静态页面到默认设置的 public 文件夹</span><br><span class="line">hexo g</span><br><span class="line"># 启动本地服务器，用于预览</span><br><span class="line">hexo s</span><br><span class="line"># 自动生成网站静态文件，并部署到设定的仓库或上传部署至服务端</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>默认地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客Blog框架简介</title>
      <link href="/2022/05/12/Blog/"/>
      <url>/2022/05/12/Blog/</url>
      
        <content type="html"><![CDATA[<p>简言之，<a href="https://baike.baidu.com/item/%E5%8D%9A%E5%AE%A2/124?fromtitle=blog&fromid=70149&fr=aladdin">Blog</a>就是以网络作为载体，简易迅速便捷地发布自己的心得，及时有效轻松地与他人进行交流，再集丰富多彩的个性化展示于一体的综合性平台。</p><h2 id="⛄博客搭建的方式"><a href="#⛄博客搭建的方式" class="headerlink" title="⛄博客搭建的方式"></a>⛄博客搭建的方式</h2><p>总体来说，Blog搭建的方式可以分为静态博客和动态博客。顾名思义，静态博客：博文内容是通过文档（如：.md文件等）记录的（一个独立的文件），通过生成工具编译成最终的<code>hml</code>、<code>css</code>、<code>js</code>等静态文件，然后部署在静态Server服务器上或<code>Web托管</code>至数据<code>仓库</code>（如：<code>Github</code>），即可在互联网中被访问，不需要数据库的支撑。动态博客：是以数据库技术为基础，其博文内容是通过数据库记录存储的，主要特点体现在<code>交互性</code>；<code>动</code>不是指网页中的页面元素或特效在动，而是与后台数据库进行交互和数据传递（如：注册登录、评论、用户管理等）。</p><p>常见的博客框架：</p><h3 id="👀静态框架"><a href="#👀静态框架" class="headerlink" title="👀静态框架"></a>👀静态框架</h3><ul><li><p>Hexo (<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>)</p></li><li><p>Hugo (<a href="https://www.gohugo.cn/">https://www.gohugo.cn/</a>)</p></li><li><p>VuePress (<a href="https://www.vuepress.cn/">https://www.vuepress.cn/</a>)</p></li><li><p>Jekyll (<a href="https://www.jekyll.com.cn/">https://www.jekyll.com.cn/</a>)</p></li></ul><h3 id="👀动态框架"><a href="#👀动态框架" class="headerlink" title="👀动态框架"></a>👀动态框架</h3><ul><li><p>WordPress  (<a href="https://wordpress.org/">https://wordpress.org/</a>)</p></li><li><p>Typecho (<a href="https://typecho.org/">https://typecho.org/</a>)</p></li><li><p>Halo (<a href="https://halo.run/">https://halo.run/</a>)</p></li><li><p>Solo (<a href="https://b3log.org/solo/">https://b3log.org/solo/</a>)</p></li></ul><h2 id="⛄框架简介"><a href="#⛄框架简介" class="headerlink" title="⛄框架简介"></a>⛄框架简介</h2><h3 id="👀Hexo"><a href="#👀Hexo" class="headerlink" title="👀Hexo"></a>👀Hexo</h3><p><code>Hexo</code> 是一个基于<code>Node.js</code>的快速、简洁且高效的静态博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo具有丰富的主题、插件系统。</p><p><strong>优点：</strong></p><ul><li>纯静态博客，部署简单、成本低廉、运行优化非常高效。</li><li>Hexo 静态博客框架可以在云端，也可以在本地电脑上甚至手机上。</li><li>Hexo 框架的博客网站没有网站后台，不存在后台安全漏洞的问题。</li><li>因为是纯静态的，几乎所有的 CDN 服务都可以完美的加速提升浏览速度。</li><li>搜索引擎对纯静态网站有天然的青睐度，收录、权重优先权明显。</li><li>纯静态网站会让网络攻击成本大大的增加也就是说纯静态网站被攻击的可能性更低了。</li></ul><h3 id="👀Hugo"><a href="#👀Hugo" class="headerlink" title="👀Hugo"></a>👀Hugo</h3><p><code>Hugo</code> 被称为是世界上最快的构建网站的框架。Hugo 是一个快速且现代的静态网站生成器，采用 Go 编程语言开发，Hugo 的设计目标是让创建网站重新变得有趣。Hugo 是一个通用的网站框架。从技术上讲，Hugo 是一个<a href="https://www.gohugo.cn/about/benefits/">静态站点生成器</a>。与动态构建页面的系统不同，Hugo 在创建或更新内容时构建页面。由于网站的浏览频率远高于编辑频率，因此 Hugo 旨在为您的网站最终用户提供最佳的浏览体验，并为网站作者提供理想的写作体验。使用 Hugo 构建的网站非常快速和安全。Hugo 构建的网站可以托管在任何地方，包括 <a href="https://netlify.com/">Netlify</a>、<a href="https://www.heroku.com/">Heroku</a>、<a href="https://www.godaddy.com/">GoDaddy</a>、<a href="https://www.dreamhost.com/">DreamHost</a>、<a href="https://pages.github.com/">GitHub Pages</a>、<a href="https://about.gitlab.com/features/pages/">GitLab Pages</a>、<a href="https://surge.sh/">Surge</a>、<a href="https://www.aerobatic.com/">Aerobatic</a>、<a href="https://firebase.google.com/docs/hosting/">Firebase</a>、<a href="https://cloud.google.com/storage/">Google Cloud Storage</a>、<a href="https://aws.amazon.com/s3/">Amazon S3</a>、<a href="https://www.rackspace.com/cloud/files">Rackspace</a>、<a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website">Azure</a>, 和 <a href="https://aws.amazon.com/cloudfront/">CloudFront</a>，并且与 CDN 更配。Hugo 网站在运行时不需要数据库或依赖于诸如 Ruby、Python 或 PHP 等昂贵的运行时环境。我们认为 Hugo 是一个理想的网站创建工具，具有几乎即时的构建时间，能够在网站修改时即刻重建。</p><p><strong>优点：</strong></p><ul><li>飞快的构建速度。在等待网站构建时有多无聊？Hugo 是同类中最快的工具。每个页面的构建时间小于一毫秒时，网站的平均构建时间不到一秒钟。</li><li>健壮的内容管理。灵活性为王。Hugo 是内容战略家的梦想。Hugo 支持无限的内容类型、分类、菜单、动态 API 驱动的内容等，所有这些都无需插件。</li><li>短代码(shortcodes)。Hugo 短代增强了 Markdown 的能力。我们喜欢 Markdown 语法的漂亮、简洁，但有时我们需要更多的灵活性。Hugo 短代码满足了美观和灵活的需求。</li><li>内置模板。Hugo 提供的通用模式让您的工作迅速完成。Hugo 提供了预制的模板，可以快速完成 SEO、评论、统计和其他功能。一行代码，完成所有工作。</li><li>支持多语言和 i18n。原生支持多语言。Hugo 为多语言站点提供了完整的 i18n 支持，并且与 Hugo 用户喜欢的单语言站点的开发体验完全相同。</li><li>定制输出。HTML 够吗？Hugo 允许以多种格式输出您的内容，包括 JSON 或 AMP，并使您可以轻松创建自己的内容。</li></ul><h3 id="👀VuePress"><a href="#👀VuePress" class="headerlink" title="👀VuePress"></a>👀VuePress</h3><p><code>VuePress</code> 由两部分组成：第一部分是一个<a href="https://github.com/vuejs/vuepress/tree/master/packages/%40vuepress/core">极简静态网站生成器 (opens new window)</a>，它包含由 Vue 驱动的<a href="https://www.vuepress.cn/theme/">主题系统</a>和<a href="https://www.vuepress.cn/plugin/">插件 API</a>，另一个部分是为书写技术文档而优化的<a href="https://www.vuepress.cn/theme/default-theme-config.html">默认主题</a>，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p><p>事实上，一个 VuePress 网站是一个由 <a href="http://vuejs.org/">Vue (opens new window)</a>、<a href="https://github.com/vuejs/vue-router">Vue Router (opens new window)</a>和 <a href="http://webpack.js.org/">webpack (opens new window)</a>驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 Vue DevTools 去调试你的自定义主题。在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的HTML。这种做法的灵感来源于 <a href="https://nuxtjs.org/">Nuxt (opens new window)</a>的 <code>nuxt generate</code> 命令，以及其他的一些项目，比如 <a href="https://www.gatsbyjs.org/">Gatsby (opens new window)</a>。</p><p><strong>优点：</strong></p><ul><li>简洁至上。以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。</li><li>Vue 驱动。享受 Vue + webpack 的开发体验，可以在 Markdown 中使用 Vue 组件，又可以使用 Vue 来开发自定义主题。</li><li>高性能。VuePress 会为每个页面预渲染生成静态的 HTML，同时，每个页面被加载的时候，将作为 SPA 运行。</li></ul><h3 id="👀Jekyll"><a href="#👀Jekyll" class="headerlink" title="👀Jekyll"></a>👀Jekyll</h3><p><code>Jekyll</code> 是一个静态网站生成器。用你喜欢的标记语言书写内容并交给 Jekyll 处理，它将利用模板为你创建一个静态网站。你可以调整你想要的网址样式、在网站上显示哪些数据等等。jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p><p><strong>优点：</strong></p><ul><li>简单。无需数据库、评论功能或频繁的版本更新—只需关注<em>你的内容</em>。</li><li>静态。只用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a>、<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>、HTML &amp; CSS g就可以构建可部署的静态网站。</li><li>博客。原生支持自定义链接、分类、静态页、文章以及自定义布局。</li></ul><h3 id="👀WordPress"><a href="#👀WordPress" class="headerlink" title="👀WordPress"></a>👀WordPress</h3><p><code>WordPress</code>是一款能让您建立出色网站、博客或应用程序的开源软件。WordPress是使用<a href="https://baike.baidu.com/item/PHP/9337">PHP</a>语言开发的博客平台，用户可以在支持PHP和MySQL数据库的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>上架设属于自己的网站。也可以把 WordPress当作一个<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2683135">内容管理系统</a>（CMS）来使用。WordPress是一款<a href="https://baike.baidu.com/item/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5466014">个人博客</a>系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和<a href="https://baike.baidu.com/item/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/10991669">MySQL数据库</a>开发的，用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。WordPress有许多第三方开发的免费模板，安装方式简单易用。不过要做一个自己的模板，则需要你有一定的专业知识。比如你至少要懂的<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073">标准通用标记语言</a>下的一个应用<a href="https://baike.baidu.com/item/HTML">HTML</a>、<a href="https://baike.baidu.com/item/CSS/5457">CSS</a>、PHP等相关知识。</p><p><strong>优点：</strong></p><ul><li>WordPress 功能强大、扩展性强、生态丰富，这主要得益于其插件众多，易于扩充功能，基本上一个完整网站该有的功能，通过其第三方插件都能实现所有功能。</li><li>wordpress搭建的博客对seo搜索引擎友好，收录也快，排名靠前。</li><li>适合DIY，如果你是喜欢丰富内容的网站，那么wordpress可以很好地符合你的胃口。</li><li>主题很多，网站上一大片都是wordpress的主题，各色各样，应有尽有！</li><li>wordpress备份和网站转移比较方便，原站点使用站内工具导出后，使用WordPress Importer插件就能方便地将内容导入新网站。</li><li>wordpress有强大的社区支持，有上千万的开发者贡献和审查wordpress，所以wordpress是安全并且活跃的。</li></ul><h3 id="👀Typecho"><a href="#👀Typecho" class="headerlink" title="👀Typecho"></a>👀Typecho</h3><p><code>Typecho</code>是由type和echo两个词合成的，来自于开发团队的头脑风暴。Typecho基于PHP5开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。选用Typecho，搭建独一无二个人<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/87941">网络日志</a>发布平台，享受创作的快乐。</p><p><strong>优点：</strong></p><ul><li>轻量高效。仅仅 7 张数据表，加上不足 400KB 的代码，就实现了完整的插件与模板机制。超低的 CPU 和内存使用率，足以发挥主机的最高性能。</li><li>先进稳定。原生支持 Markdown 排版语法，易读更易写。支持 BAE&#x2F;GAE&#x2F;SAE 等各类云主机，即使面对突如其来的高访问量，也能轻松应对。</li><li>简洁友好。精心打磨过的操作界面，依然是你熟悉的面孔，更多了一份成熟与贴心。每一个像素的剪裁，都只为离完美更进一步。</li></ul><h3 id="👀Halo"><a href="#👀Halo" class="headerlink" title="👀Halo"></a>👀Halo</h3><p><code>Halo</code>是一款基于<code>Java</code>语言，使用<a href="https://baike.baidu.com/item/Spring%20Boot/20249767?fr=aladdin">Spring Boot</a>框架开发的博客系统，致力于打造最好的 Java 博客系统，且只想安安静静的做一个博客系统。</p><p><strong>优点：</strong></p><ul><li>代码开源。我们的所有代码开源在 <a href="https://github.com/halo-dev">GitHub</a> 上且处于积极维护状态，截止目前已经发布了 <a href="https://github.com/halo-dev/halo/releases">81</a> 个版本。您也可以在上面提交您的问题或者参与代码贡献。</li><li>易于部署。采用了程序与用户配置分离的方式，迁移和备份成本大大降低。您只需要一条命令即可运行成功，同时也支持 Docker 部署。</li><li>REST API。提供了完善的 <a href="https://api.halo.run/content-api.html">Content API</a> 和 <a href="https://api.halo.run/admin-api.html">Admin API</a>，你可以用于开发单页面模板，微信小程序，各种系统的插件等。</li><li>模板系统完善的模板系统，支持自定义配置，支持在线安装和更新。开发主题也十分方便，欢迎大家参与主题的开发。</li><li>附件系统。支持本地上传，阿里云 OSS&#x2F;又拍云 OSS&#x2F;七牛云 OSS&#x2F;SM.MS 等云存储，你可以更方便的管理你文章中的附件。</li><li>评论系统拥有独立的评论插件，使用 Vue 开发，只需在页面引入构建好的 JS 文件即可，完美地和主题相结合。目前已有多款评论组件，你可以非常方便的切换。</li></ul><h3 id="👀Solo"><a href="#👀Solo" class="headerlink" title="👀Solo"></a>👀Solo</h3><p><code>Solo</code> 是一款基于Java语言有后台管理的，小而美的博客系统，专为程序员设计</p><p><strong>优点：</strong></p><ul><li>Markdown 编辑器支持三种编辑模式：所见即所得 &#x2F; 即时渲染 &#x2F; 分屏预览。</li><li><a href="https://ld246.com/article/1498490209748">Hexo &#x2F; Jekyll &#x2F; Markdown 导入</a>。</li><li>SQL &#x2F; JSON &#x2F; Markdown 导出。</li><li>拉取 GitHub 仓库和自动备份。</li><li>内置 HTTPS+CDN 文件存储。</li><li>支持生成导出静态站点，用于发布 GitHub Pages。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
